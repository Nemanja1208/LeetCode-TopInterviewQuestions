Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.


Solution (is fastest) :

function threeSum(nums: number[]): number[][] {
    let res: number[][] = [];
    let n = nums.length;
    nums.sort((a, b) => a - b);
  
    for (let i = 0; i < n - 2; i++) {
        if (i > 0 && nums[i] == nums[i - 1]) continue;
        let j = i + 1, k = n - 1;
        while (j < k) {
            let sum = nums[i] + nums[j] + nums[k];
            if (sum == 0) {
                res.push([nums[i], nums[j], nums[k]]);
                while (j < k && nums[j] == nums[j + 1]) j++;
                while (j < k && nums[k] == nums[k - 1]) k--;
                j++; k--;
            } else if (sum < 0) {
                j++;
            } else {
                k--;
            }
        }
    }
    return res;
}


Explanation :

First, we sort the given array in ascending order to make sure that the smaller numbers are at the beginning of the array and the larger numbers are at the end.

Initialize two pointers j and k that point to the first and last elements of the array, respectively.

Iterate over the array using an outer loop with index i that starts from the first element.

In the inner loop, the sum of nums[i], nums[j] and nums[k] is calculated. If the sum is equal to zero, the triplet [nums[i], nums[j], nums[k]] is added to the result array res.

To avoid duplicate triplets, two pointers j and k are moved towards each other. If the sum is less than zero, j is incremented. If the sum is greater than zero, k is decremented.

Finally, the result array res containing all the unique triplets is returned.