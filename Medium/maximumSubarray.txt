Given an integer array nums, find the subarray with the largest sum, and return its sum.

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.

Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.


Solution >

function maxSubArray(nums: number[]): number {
  let maxSum = nums[0]; // Initialize maxSum to the first element of the array
  let currentSum = nums[0]; // Initialize currentSum to the first element of the array
  
  for (let i = 1; i < nums.length; i++) {
    currentSum = Math.max(nums[i], currentSum + nums[i]); // Calculate the current sum of the subarray that ends at index i
    maxSum = Math.max(maxSum, currentSum); // Update maxSum if the current sum is greater
  }
  
  return maxSum;
}

Explanation >

This function takes an integer array nums as input and returns the sum of the subarray with the largest sum. It uses the Kadane's algorithm to solve the problem in O(n) time complexity.

The algorithm maintains two variables, maxSum and currentSum. maxSum is initialized to the first element of the array, and currentSum is also initialized to the first element of the array. Then, the function iterates through the array starting from the second element. For each element, it calculates the current sum of the subarray that ends at that element by taking the maximum of the element itself and the sum of the previous subarray and the current element. It then updates maxSum if the current sum is greater than maxSum. Finally, it returns maxSum.

For example, let's take the input array [-2,1,-3,4,-1,2,1,-5,4]:

maxSubArray([-2,1,-3,4,-1,2,1,-5,4])

The function initializes maxSum and currentSum to -2. It then iterates through the array as follows:

i = 1: currentSum = 1, maxSum = 1
i = 2: currentSum = -2, maxSum = 1
i = 3: currentSum = 4, maxSum = 4
i = 4: currentSum = 3, maxSum = 4
i = 5: currentSum = 5, maxSum = 5
i = 6: currentSum = 6, maxSum = 6
i = 7: currentSum = 1, maxSum = 6
i = 8: currentSum = 5, maxSum = 6

The function returns 6, which is the sum of the subarray [4,-1,2,1], which has the largest sum in the input array.

In summary, the Kadane's algorithm is an efficient way to solve the maximum subarray problem, and the TypeScript implementation is concise and easy to understand.

Faster solution >

function maxSubArray(nums: number[]): number {
    let currentSubarray = nums[0];
    let maxSubarray = nums[0];

    for (let i = 1; i < nums.length; i++) {
        currentSubarray = Math.max(nums[i], currentSubarray + nums[i]);
        maxSubarray = Math.max(maxSubarray, currentSubarray);
    }

    return maxSubarray;
};