You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. 
If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

Example 1:
Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

Example 2:
Input: coins = [2], amount = 3
Output: -1

Example 3:
Input: coins = [1], amount = 0
Output: 0


Solution >

function coinChange(coins: number[], amount: number): number {
  const dp: number[] = new Array(amount + 1).fill(Infinity);
  dp[0] = 0;

  for (let i = 1; i <= amount; i++) {
    for (const coin of coins) {
      if (coin <= i) {
        dp[i] = Math.min(dp[i], dp[i - coin] + 1);
      }
    }
  }

  return dp[amount] === Infinity ? -1 : dp[amount];
}



Explanation >

We initialize an array dp with length amount + 1 and fill it with Infinity. The dp array will store the fewest number of coins needed to make up each amount from 0 to the given amount. 
Initially, we set dp[0] to 0 because it takes 0 coins to make up an amount of 0.
We iterate from 1 to amount and for each amount i, we consider all the coins in the coins array.
If the coin value coin is less than or equal to the current amount i, it means we can use this coin to make up the amount i. 
In that case, we update dp[i] to be the minimum of its current value and dp[i - coin] + 1. 
The dp[i - coin] + 1 represents the fewest number of coins needed to make up the remaining amount i - coin, plus one coin of value coin.
After the iteration is complete, we return dp[amount] if it is still Infinity, indicating that it is not possible to make up the given amount using the available coins. 
Otherwise, we return dp[amount], which represents the fewest number of coins needed to make up the given amount.
Let's walk through an example:

const coins = [1, 2, 5];
const amount = 11;
console.log(coinChange(coins, amount)); // Output: 3
In this example, we have coins with denominations [1, 2, 5] and we need to make up the amount 11. 
The algorithm will compute the fewest number of coins needed to make up the amount. Here's how the dp array is updated during the iteration:

dp[0] = 0 (base case)
dp[1] = Math.min(Infinity, dp[1 - 1] + 1) = Math.min(Infinity, dp[0] + 1) = 1
dp[2] = Math.min(Infinity, dp[2 - 1] + 1) = Math.min(Infinity, dp[1] + 1) = 2
dp[3] = Math.min(Infinity, dp[3 - 1] + 1) = Math.min(Infinity, dp[2] + 1) = 3
dp[4] = Math.min(Infinity, dp[4 - 1] + 1) = Math.min(Infinity, dp[3] + 1) = 4
dp[5] = Math.min(Infinity, dp[5 - 1] + 1, dp[5 - 2] + 1) = Math.min(Infinity, dp[4] + 1, dp[3] + 1) = 3
dp[6] = Math.min(Infinity, dp[6 - 1] + 1, dp[6 - 2] + 1) = Math.min(Infinity, dp[5] + 1, dp[4] + 1) = 4
dp[7] = Math.min(Infinity, dp[7 - 1] + 1, dp[7 - 2] + 1) = Math.min(Infinity, dp[6] + 1, dp[5] + 1) = 5
dp[8] = Math.min(Infinity, dp[8 - 1] + 1, dp[8 - 2] + 1) = Math.min(Infinity, dp[7] + 1, dp[6] + 1) = 4
dp[9] = Math.min(Infinity, dp[9 - 1] + 1, dp[9 - 2] + 1) = Math.min(Infinity, dp[8] + 1, dp[7] + 1) = 5
dp[10] = Math.min(Infinity, dp[10 - 1] + 1, dp[10 - 2] + 1) = Math.min(Infinity, dp[9] + 1, dp[8] + 1) = 5
dp[11] = Math.min(Infinity, dp[11 - 1] + 1, dp[11 - 2] + 1, dp[11 - 5] + 1) = Math.min(Infinity, dp[10] + 1, dp[9] + 1, dp[6] + 1) = 3
Finally, we return dp[11], which is 3, indicating that we need at least 3 coins to make up the amount 11 using the available coins [1, 2, 5].


Fastest solution >

function coinChange(coins: number[], amount: number): number {
    // first make all equal Infinity
    // dp[0] = 0
    // calculate dp
    // check for edge case if(dp[amount] > amount ? -1 : dp[amount])

    const dp = new Array(amount+1).fill(Infinity);
    dp[0] = 0;
    for(let i=0;i<coins.length;i++){
        for(let j=1;j<=amount;j++) {
            if(j >= coins[i]) {         
                dp[j] = Math.min(dp[j],dp[j-coins[i]]+1);
            }
        }
    }
    return dp[amount] > amount ?-1 :dp[amount];
};