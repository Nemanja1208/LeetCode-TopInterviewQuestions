Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

You must find a solution with a memory complexity better than O(n2).

Example 1:
Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
Output: 13
Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13

Example 2:
Input: matrix = [[-5]], k = 1
Output: -5
 
Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 300
-109 <= matrix[i][j] <= 109
All the rows and columns of matrix are guaranteed to be sorted in non-decreasing order.
1 <= k <= n2
 
Follow up:

Could you solve the problem with a constant memory (i.e., O(1) memory complexity)?
Could you solve the problem in O(n) time complexity? The solution may be too advanced for an interview but you may find reading this paper fun.


Solution >

function kthSmallest(matrix: number[][], k: number): number {
    const n = matrix.length;
    let left = matrix[0][0];
    let right = matrix[n - 1][n - 1];

    while (left < right) {
        const mid = Math.floor((left + right) / 2);
        const count = countSmallerOrEqual(matrix, mid);

        if (count < k) {
            left = mid + 1;
        } else {
            right = mid;
        }
    }

    return left;
}

function countSmallerOrEqual(matrix: number[][], target: number): number {
    let count = 0;
    const n = matrix.length;
    let row = n - 1;
    let col = 0;

    while (row >= 0 && col < n) {
        if (matrix[row][col] <= target) {
            count += row + 1; // Add the entire column below the current element
            col++;
        } else {
            row--;
        }
    }

    return count;
}


Explanation >

The kthSmallest function takes the matrix and the value of k as input and returns the kth smallest element in the matrix.
We initialize the left boundary to the smallest element in the matrix (matrix[0][0]) and the right boundary to the largest element in the matrix (matrix[n-1][n-1]).
While the left boundary is less than the right boundary, we find the middle value (mid) of the range and count the number of elements in the matrix that are less than or equal to mid.
If the count is less than k, we update the left boundary to mid + 1 to search in the upper range. Otherwise, we update the right boundary to mid to search in the lower range.
We repeat this process until the left and right boundaries meet.
The countSmallerOrEqual function counts the number of elements in the matrix that are less than or equal to the target value.
We start from the bottom-left corner of the matrix (matrix[n-1][0]) and move towards the top-right corner.
If the current element is less than or equal to the target, we add the entire column below the current element to the count and move to the next column.
If the current element is greater than the target, we move to the previous row.
We continue this process until we reach the top-right corner of the matrix.
Complexity Analysis:

The time complexity of the solution is O(n log(max - min)), where n is the size of the matrix and max - min is the range of possible values.
The binary search takes log(max - min) iterations, and in each iteration, we count the number of elements in the matrix, which takes O(n) time.
The space complexity is O(1) as we are using a constant amount of memory.
Overall, this solution uses binary search to find the kth smallest element in the matrix with a time complexity better than O(n^2) and constant memory complexity.

Fastest solution >

function kthSmallest(matrix: number[][], k: number): number {
    let low = matrix[0][0], high = matrix[matrix.length - 1][matrix.length - 1];
    while (low < high) {
        let mid = Math.floor((high + low) / 2);
        let count = countElements(matrix, mid);
        if (count < k) {
            low = mid + 1;
        } else {
            high = mid;
        }
    }
    return low;
};

function countElements(matrix: number[][], mid: number): number {
    let result = 0;
    for (let i = 0; i < matrix.length; i++) {
        for (let j = 0; j < matrix[i].length; j++) {
            if (matrix[i][j] <= mid) {
                result += 1;
            } else {
                break;
            }
        }
    }
    return result;
}