Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, 
construct and return the binary tree.

Example 1:
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: preorder = [-1], inorder = [-1]
Output: [-1]


Solution :

function buildTree(preorder: number[], inorder: number[]): TreeNode | null {
  const map = new Map<number, number>();
  for (let i = 0; i < inorder.length; i++) {
    map.set(inorder[i], i);
  }
  let preIndex = 0;

  function dfs(start: number, end: number): TreeNode | null {
    if (start > end) {
      return null;
    }
    const rootValue = preorder[preIndex];
    const root = new TreeNode(rootValue);
    preIndex++;
    const rootIndex = map.get(rootValue)!;
    root.left = dfs(start, rootIndex - 1);
    root.right = dfs(rootIndex + 1, end);
    return root;
  }

  return dfs(0, inorder.length - 1);
}

Explanation :

The buildTree function takes in two arrays preorder and inorder as input and returns the root of the constructed binary tree. 
We use a recursive helper function called dfs to construct the tree.

First, we create a Map called map to store the indices of the values in the inorder array. 
This is done to quickly find the index of the root node in the inorder traversal, which helps us split the left and right subtrees.

Then, we define preIndex to keep track of the index of the next node to process in the preorder array. 
We start processing the tree from the root node by calling dfs with start and end indices representing the current range of values in the inorder array.

Inside dfs, we check if start is greater than end, which means we've reached the end of a subtree and should return null. 
Otherwise, we create a new node with the value at preorder[preIndex] and increment preIndex. 
We find the index of this value in the inorder array using the map we created earlier and split the left and right subtrees accordingly. 
We then recursively call dfs on the left and right subtrees and set the resulting nodes as the left and right children of the current node, respectively.

Finally, we return the root node of the constructed binary tree.

Fastest solution :

function buildTree(preorder: number[], inorder: number[]): TreeNode | null {
   let pre_idx = 0;

    function build (in_left, in_right) {
        if (in_left == in_right)
            return null;

        const rootVal = preorder[pre_idx++];
        let root = new TreeNode(rootVal);

        const rootIndex = map.get(rootVal);
        root.left = build(in_left, rootIndex);
        root.right = build(rootIndex + 1, in_right);

        return root;
    }

    const map = new Map();
    inorder.forEach((item, index) => {
        map.set(item, index);
    });

    return build(0, inorder.length);
};