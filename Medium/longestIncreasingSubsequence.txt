Given an integer array nums, return the length of the longest strictly increasing subsequence

Example 1:
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:
Input: nums = [7,7,7,7,7,7,7]
Output: 1


Solution :

function lengthOfLIS(nums: number[]): number {
  const n = nums.length;
  const dp = Array(n).fill(1);

  for (let i = 1; i < n; i++) {
    for (let j = 0; j < i; j++) {
      if (nums[i] > nums[j]) {
        dp[i] = Math.max(dp[i], dp[j] + 1);
      }
    }
  }

  let maxLength = 0;
  for (let i = 0; i < n; i++) {
    maxLength = Math.max(maxLength, dp[i]);
  }

  return maxLength;
}


Explanation :

We define a function lengthOfLIS that takes an array of numbers nums as input and returns the length of the longest strictly increasing subsequence.

We initialize a variable n with the length of the input array nums and create an array dp of the same length, filled with 1s. 
The dp array will be used to store the lengths of the increasing subsequences ending at each index.

We iterate over the array nums starting from the second element (i = 1). For each element, we iterate over all previous elements (j) and check if nums[i] is greater than nums[j]. 
If it is, it means we can extend the increasing subsequence ending at index i by including the element at index j. 
In that case, we update dp[i] to be the maximum value between its current value and dp[j] + 1. 
This ensures that we keep track of the longest increasing subsequence ending at each index.

After the nested loops, we have computed the lengths of all the increasing subsequences ending at each index. 
To find the maximum length, we iterate over the dp array and update the maxLength variable if we find a longer subsequence length.

Finally, we return the maxLength, which represents the length of the longest strictly increasing subsequence in the input array nums.

Let's test the solution with the provided examples:

console.log(lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 18])); // Output: 4
console.log(lengthOfLIS([0, 1, 0, 3, 2, 3])); // Output: 4
console.log(lengthOfLIS([7, 7, 7, 7, 7, 7, 7])); // Output: 1
The output matches the expected results for all the examples.


Fastest solution :

function lengthOfLIS(nums: number[]): number {
	let piles = [nums[0]];
	for (let i = 1; i < nums.length; i++) {
		let startNewPile = true;
		for (let j = 0; j < piles.length; j++) {
			if (nums[i] <= piles[j]) {
				piles[j] = nums[i];
				startNewPile = false;
				break;
			}
		}
		if (startNewPile) {
			piles.push(nums[i]);
		}
	}
	return piles.length;
}