Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Example 1:
Input: root = [2,1,3]
Output: true

Example 2:
Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.


Solution >

/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     val: number
 *     left: TreeNode | null
 *     right: TreeNode | null
 *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {
 *         this.val = (val===undefined ? 0 : val)
 *         this.left = (left===undefined ? null : left)
 *         this.right = (right===undefined ? null : right)
 *     }
 * }
 */

function isValidBST(root: TreeNode | null): boolean {
  return validate(root, null, null);
}

function validate(node: TreeNode | null, min: number | null, max: number | null): boolean {
  if (node === null) {
    return true;
  }
  if (min !== null && node.val <= min) {
    return false;
  }
  if (max !== null && node.val >= max) {
    return false;
  }
  return validate(node.left, min, node.val) && validate(node.right, node.val, max);
}

Explanation >

The idea behind the solution is to use recursion to check whether each node satisfies the constraints of a valid BST. 
We start by checking the root node, which has no upper or lower bounds. 
Then, we recursively check each subtree, passing down the upper and lower bounds for the nodes in that subtree.

We use two helper functions, isValidBST and validate. isValidBST is the entry point of the recursion and calls validate with the root node and 
null for both the minimum and maximum bounds. validate checks whether a given node is a valid BST node by checking whether its value is within the given bounds. 
If the node satisfies the constraints, we recursively call validate on its left and right subtrees, passing down updated bounds.

If at any point a node violates the BST constraints, we immediately return false and terminate the recursion. 
If we reach the end of the recursion without finding any violations, we return true.

Note that we use null to represent the absence of a bound. 
This is because a node may not have a bound in one direction (e.g., the root node has no upper bound) but may have a bound in the other direction 
(e.g., a leaf node has a lower bound but no upper bound).

Fastest solution >

function validate(root: TreeNode | null, l:number, r:number): boolean {
  if (!root) return true; 
  if (root.val <= l || root.val >= r) return false;
  let validLeft = validate(root.left,l,root.val);
  let validRight = validate(root.right,root.val, r);
  return (validLeft && validRight);
}

function isValidBST(root: TreeNode | null): boolean {
  return validate (root, Infinity *-1, Infinity);
};