Given an integer array nums, design an algorithm to randomly shuffle the array. 
All permutations of the array should be equally likely as a result of the shuffling.

Implement the Solution class:

Solution(int[] nums) Initializes the object with the integer array nums.
int[] reset() Resets the array to its original configuration and returns it.
int[] shuffle() Returns a random shuffling of the array.

Example 1:
Input
["Solution", "shuffle", "reset", "shuffle"]
[[[1, 2, 3]], [], [], []]
Output
[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]

Explanation
Solution solution = new Solution([1, 2, 3]);
solution.shuffle();    // Shuffle the array [1,2,3] and return its result.
                       // Any permutation of [1,2,3] must be equally likely to be returned.
                       // Example: return [3, 1, 2]
solution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]
solution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]

Constraints:

1 <= nums.length <= 50
-106 <= nums[i] <= 106
All the elements of nums are unique.
At most 104 calls in total will be made to reset and shuffle.


Solution >

class Solution {
    originalNums: number[];
    shuffledNums: number[];

    constructor(nums: number[]) {
        this.originalNums = [...nums];
        this.shuffledNums = [...nums];
    }

    reset(): number[] {
        this.shuffledNums = [...this.originalNums];
        return this.shuffledNums;
    }

    shuffle(): number[] {
        const n = this.shuffledNums.length;
        for (let i = n - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [this.shuffledNums[i], this.shuffledNums[j]] = [this.shuffledNums[j], this.shuffledNums[i]];
        }
        return this.shuffledNums;
    }
}



Explanation >

The Solution class has two properties: originalNums and shuffledNums. originalNums stores the original array, while shuffledNums stores the current shuffled array.
The constructor initializes both originalNums and shuffledNums with a copy of the input array nums.
The reset method simply copies originalNums back into shuffledNums and returns it.
The shuffle method performs the random shuffling of the array using the Fisher-Yates algorithm.
It iterates from the last element to the first.
For each iteration, it generates a random index j between 0 and the current index i.
It swaps the elements at indices i and j, effectively shuffling the array.
Finally, it returns the shuffled array.
The algorithm ensures that all permutations of the array are equally likely because each element has an equal chance of being placed at any position during the shuffling process.

Note: The Fisher-Yates algorithm is used for shuffling, which has a time complexity of O(n), where n is the length of the array.

Fastest solution >

class Solution {
    nums: number[]
    initialNums : number[]
    constructor(nums: number[]) {
        this.nums = nums.map(x=>x)
        this.initialNums = Array.from(nums)
    }

    reset(): number[] {
        this.nums = Array.from(this.initialNums)
        return this.nums
    }

    swap(i:number,j:number) {
        const tmp = this.nums[i]
        this.nums[i] = this.nums[j]
        this.nums[j] = tmp
    }

    shuffle(): number[] {
        // random shuffling
        const len = this.nums.length
        for (let i=0; i < this.nums.length; i++) {
             const j = Math.floor(Math.random() * len)
             if (i !== j)   
                this.swap(i,j)
        }
        return this.nums
    }
}
