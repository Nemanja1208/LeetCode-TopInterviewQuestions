Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

Example 1:
Input: s = "leetcode"
Output: 0

Example 2:
Input: s = "loveleetcode"
Output: 2

Example 3:
Input: s = "aabb"
Output: -1

Constraints:

1 <= s.length <= 105
s consists of only lowercase English letters.


Solution >

function firstUniqChar(s: string): number {
    const charCounts: Map<string, number> = new Map();

    // Count the occurrences of each character
    for (let i = 0; i < s.length; i++) {
        const char = s[i];
        charCounts.set(char, (charCounts.get(char) || 0) + 1);
    }

    // Find the first non-repeating character
    for (let i = 0; i < s.length; i++) {
        const char = s[i];
        if (charCounts.get(char) === 1) {
            return i;
        }
    }

    // If no non-repeating character is found, return -1
    return -1;
}

Explanation >

We define a function firstUniqChar that takes a string s as input and returns the index of the first non-repeating character or -1 if it doesn't exist.

We create a Map called charCounts to store the counts of each character in the string. The key of the map is the character, and the value is the count.

We iterate through the string s using a for loop and update the counts of each character in the charCounts map. 
We use the Map.get() method to retrieve the current count of a character, and if it doesn't exist, we default it to 0.

After counting the occurrences of each character, we iterate through the string s again to find the first non-repeating character. 
We use the Map.get() method to check the count of each character. If a character has a count of 1, we return its index.

If we don't find any non-repeating characters during the iteration, we return -1.

This solution has a time complexity of O(n), where n is the length of the input string. 
We iterate through the string twice, but each iteration takes O(n) time. 
The space complexity is also O(n) because we store the counts of each character in a map.

Fastest solution >

function firstUniqChar(s: string): number {
    let counts = new Array(26).fill(0);
    
    for (let i = 0; i < s.length; i++) {
        const index: number = s.charCodeAt(i) - 'a'.charCodeAt(0);
        counts[index]++;
    }
    
    for (let i = 0; i < s.length; i++) {
        const index: number = s.charCodeAt(i) - 'a'.charCodeAt(0);
        if (counts[index] === 1) {
            return i
        }
    }
    return -1;
};