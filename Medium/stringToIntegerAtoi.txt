Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).

The algorithm for myAtoi(string s) is as follows:

Read in and ignore any leading whitespace.
Check if the next character (if not already at the end of the string) is '-' or '+'. 
Read this character in if it is either. This determines if the final result is negative or positive respectively. 
Assume the result is positive if neither is present.
Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.
Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. 
Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
Return the integer as the final result.

Note:

Only the space character ' ' is considered a whitespace character.
Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.


Result:

function myAtoi(s: string): number {
    // Step 1: Read in and ignore any leading whitespace
    let i = 0;
    while (i < s.length && s[i] === ' ') {
        i++;
    }

    // Step 2: Check if the next character is '-' or '+'
    let sign = 1;
    if (i < s.length && (s[i] === '-' || s[i] === '+')) {
        sign = s[i] === '-' ? -1 : 1;
        i++;
    }

    // Step 3: Read in next the characters until the next non-digit character or the end of the input is reached
    let num = 0;
    while (i < s.length && /[0-9]/.test(s[i])) {
        num = num * 10 + (s[i].charCodeAt(0) - '0'.charCodeAt(0));
        i++;
    }

    // Step 4: Convert these digits into an integer and change the sign as necessary
    num *= sign;

    // Step 5: Clamp the integer if necessary
    num = Math.max(Math.min(num, 2147483647), -2147483648);

    // Step 6: Return the integer as the final result
    return num;
}


// Fastest solution
function myAtoi(s: string): number {
    s= s.trim();
    const number = s.match(/^[-+]?\d+/);
    if (number){
        const integer = parseInt(number[0]);
        const _x231 = 2**31;
        if(integer > (_x231 -1))
            return _x231 -1;
        else if (integer < -1*_x231)
            return -1*_x231;
        return integer;
    }
    return 0;
};


Explanation:

In step 1, we ignore any leading whitespaces in the string by using a while loop. 
The loop continues as long as the current character is a space and we haven't reached the end of the string.

In step 2, we check if the next character is either a '-' or a '+' sign. If it is, we read it in and set the sign of the result accordingly. 
If there is no sign, we assume the result is positive.

In step 3, we use a while loop to read in the next characters until we reach the next non-digit character or the end of the input. 
During the loop, we convert the string representation of the digits into an integer.

In step 4, we multiply the integer by the sign determined in step 2 to get the final result with the correct sign.

In step 5, we clamp the result to the 32-bit signed integer range [-231, 231 - 1] using Math.min and Math.max.

In step 6, we return the final result.

