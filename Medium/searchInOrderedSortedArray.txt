There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) 
such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). 
For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:

Input: nums = [1], target = 0
Output: -1


Solution >

function search(nums: number[], target: number): number {
  let left = 0;
  let right = nums.length - 1;

  while (left <= right) {
    const mid = Math.floor((left + right) / 2);

    if (nums[mid] === target) {
      return mid;
    }

    // If left half is sorted
    if (nums[left] <= nums[mid]) {
      if (target >= nums[left] && target < nums[mid]) {
        right = mid - 1; // Search left half
      } else {
        left = mid + 1; // Search right half
      }
    }
    // If right half is sorted
    else {
      if (target > nums[mid] && target <= nums[right]) {
        left = mid + 1; // Search right half
      } else {
        right = mid - 1; // Search left half
      }
    }
  }

  return -1; // Target not found
}

Explanation >

The algorithm is based on the binary search algorithm. The idea is to divide the array into two halves and determine which half is sorted. 
If the left half is sorted, we can easily determine whether the target is in that half by comparing the target with the first and the middle element of that half. 
Similarly, if the right half is sorted, we can determine whether the target is in that half by comparing the target with the last and the middle element of that half.

If we can determine which half is sorted and the target is not in that half, we can safely discard that half and continue the search on the other half. 
By doing so, we can reduce the search space in each iteration by half, resulting in a logarithmic time complexity of O(log n).

Note that we first check whether the middle element is the target. If it is, we can immediately return the index of the middle element. 
Otherwise, we proceed to check which half is sorted.

Fastest solution >

function search(nums: number[], target: number): number {
    let left = 0;
    let right = nums.length-1;

    while (left <= right) {
        const mid = Math.floor((left + right)/2);

        if (nums[mid] === target) {
            return mid;
        }

        // left side sorted
        if (nums[left] <= nums[mid]) {
            if (nums[left] <= target && target < nums[mid]) {
                right = mid-1;
            } else {
                left = mid+1;
            }
        // right side sorted
        } else {
            if (nums[mid] < target && target <= nums[right]) {
                left = mid+1;
            } else {
                right = mid-1;
            }
        }
    }

    return -1;

