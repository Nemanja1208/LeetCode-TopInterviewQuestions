Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true


Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.


Solution >

function isValidSudoku(board: string[][]): boolean {
  const rows = board.length;
  const cols = board[0].length;

  // Validate rows
  for (let row = 0; row < rows; row++) {
    const used: boolean[] = new Array(9).fill(false);
    for (let col = 0; col < cols; col++) {
      const cell = board[row][col];
      if (cell !== '.') {
        const digit = parseInt(cell) - 1;
        if (used[digit]) {
          return false;
        }
        used[digit] = true;
      }
    }
  }

  // Validate columns
  for (let col = 0; col < cols; col++) {
    const used: boolean[] = new Array(9).fill(false);
    for (let row = 0; row < rows; row++) {
      const cell = board[row][col];
      if (cell !== '.') {
        const digit = parseInt(cell) - 1;
        if (used[digit]) {
          return false;
        }
        used[digit] = true;
      }
    }
  }

  // Validate sub-boxes
  for (let box = 0; box < 9; box++) {
    const used: boolean[] = new Array(9).fill(false);
    const rowOffset = Math.floor(box / 3) * 3;
    const colOffset = (box % 3) * 3;
    for (let row = rowOffset; row < rowOffset + 3; row++) {
      for (let col = colOffset; col < colOffset + 3; col++) {
        const cell = board[row][col];
        if (cell !== '.') {
          const digit = parseInt(cell) - 1;
          if (used[digit]) {
            return false;
          }
          used[digit] = true;
        }
      }
    }
  }

  return true;
}

Explanation >

The function takes a 2D array of strings representing the Sudoku board. Empty cells are represented by the '.' character, 
while filled cells are represented by the digits from 1 to 9.

The function first iterates over each row of the board, and for each row, it creates an array used of booleans indicating which digits have already been used. 
It then iterates over each cell of the row, and for each filled cell, it checks whether the corresponding digit has already been used in the row. 
If it has, the function immediately returns false, indicating that the board is invalid.

The function then repeats the same process for each column of the board, and for each 3x3 sub-box of the board. 
To iterate over the sub-boxes, the function uses a box index box ranging from 0 to 8, and calculates the corresponding row and column offsets based on the box index.

If the function has iterated over all rows, columns, and sub-boxes without finding any invalid cells, it returns true, 
indicating that the board is valid according to the Sudoku rules.

Note that this implementation assumes that the input board is a valid Sudoku board, meaning that it has exactly 9 rows and 9 columns, 
and that each cell contains either a digit from 1 to 9 or the '.' character. 
If the input board does not satisfy these assumptions, the function may produce incorrect results or even throw errors.


Fastest solution >

function isValidSudoku(board: string[][]): boolean {
  // x
  for (let y = 0; y < board.length; y++) {
    const element = board[y]
    if (!checkOnRepeatedNumbers(element)) return false
  }
  // y
  for (let i = 0; i < board[0].length; i++) {
    const elements: string[] = []
    for (let index = 0; index < board.length; index++) {
      const item = board[index][i]
      elements.push(item)
    }
    if (!checkOnRepeatedNumbers(elements)) return false
  }

  // box
  let x = 0
  let y = 0
  for (let i = 0; i < 9; i++) {
    const square = getSquare(x, y)
    if (!checkOnRepeatedNumbers(square)) return false
    x += 3
    if (x === 9) {
      x = 0
      y += 3
    }
  }
  return true

  function checkOnRepeatedNumbers(arr: string[]): boolean {
    for (let i = 0; i < arr.length; i++) {
      const item = arr[i]
      if (item === '.') continue
      for (let j = 0; j < arr.length; j++) {
        const element = arr[j]
        if (element === '.') continue
        if (item === element && j !== i) return false
      }
    }
    return true
  }
  function getSquare(x: number, y: number): string[] {
    const values: string[] = []
    // const [startX, startY] = getSquareStartCords(x, y)
    const startX = x
    const startY = y
    for (let i = startY; i < startY + 3; i++) {
      const row = board[i]
      for (let j = startX; j < startX + 3; j++) {
        const item = row[j]
        values.push(item)
      }
    }
    return values
  }
}