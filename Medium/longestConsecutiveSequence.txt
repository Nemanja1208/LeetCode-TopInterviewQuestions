Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Example 2
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

Solution >

function longestConsecutive(nums: number[]): number {
  const numSet = new Set(nums);
  let longestStreak = 0;

  for (const num of numSet) {
    if (!numSet.has(num - 1)) {
      let currentNum = num;
      let currentStreak = 1;

      while (numSet.has(currentNum + 1)) {
        currentNum += 1;
        currentStreak += 1;
      }

      longestStreak = Math.max(longestStreak, currentStreak);
    }
  }

  return longestStreak;
}


Explanation >

The solution uses a Set to efficiently determine whether an element is present in the array. The time complexity of Set.has() is O(1).

The algorithm then iterates over each element in the Set and checks whether it's the beginning of a consecutive sequence. 
An element is the beginning of a sequence if it doesn't have a previous element in the Set.

If an element is the beginning of a sequence, the algorithm loops through the consecutive elements to determine the length of the sequence. 
The time complexity of this loop is O(n) in the worst case, where n is the length of the array.

Finally, the algorithm updates the longestStreak variable if the current streak is longer than the previous longest streak. The time complexity of Math.max() is O(1).

The overall time complexity of the algorithm is O(n), which meets the requirement of the problem.

Fastest solution >

function longestConsecutive(nums: number[]): number {
    const numSet = new Set(nums)
    let longestStrek = 0

    for (const num of numSet) {
        if (!numSet.has(num - 1)) {
            let currentNum = num
            let currentStrek = 1

            while (numSet.has(currentNum + 1)) {
                currentNum += 1
                currentStrek += 1
            }

            longestStrek = Math.max(longestStrek, currentStrek)
        }
    }

    return longestStrek
};