There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). 
The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example 1:

Input: m = 3, n = 7
Output: 28

Example 2:

Input: m = 3, n = 2
Output: 3

Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

Solution >

function uniquePaths(m: number, n: number): number {
  const dp: number[][] = [];

  // Initialize the dp array with all zeros.
  for (let i = 0; i < m; i++) {
    dp[i] = new Array(n).fill(0);
  }

  // There is only one way to reach any cell in the first row or first column.
  for (let i = 0; i < m; i++) {
    dp[i][0] = 1;
  }
  for (let j = 0; j < n; j++) {
    dp[0][j] = 1;
  }

  // Compute the number of unique paths for each cell in the grid.
  for (let i = 1; i < m; i++) {
    for (let j = 1; j < n; j++) {
      dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
    }
  }

  // The number of unique paths to the bottom-right corner is stored in the last cell of the dp array.
  return dp[m - 1][n - 1];
}

Explanation >

The solution uses dynamic programming to compute the number of unique paths from the top-left corner to each cell in the grid. 
The idea is to use a two-dimensional array dp to store the number of unique paths for each cell. 
The value of dp[i][j] represents the number of unique paths from the top-left corner to the cell at row i and column j.

To initialize the dp array, we set all the values to zero. 
Then, we set the values for the first row and first column to one, since there is only one way to reach any cell in these rows or columns (by moving either right or down).

We then iterate over the remaining cells in the grid, and compute the number of unique paths for each cell by adding the number of unique paths to the cell above it 
and the cell to the left of it. 
This is because the robot can only move down or right, so the number of unique paths to a cell is the sum of the number of unique paths to the cell above it 
and the cell to the left of it.

Finally, the number of unique paths to the bottom-right corner is stored in the last cell of the dp array, and we return this value.

Note that this solution has a time complexity of O(mn) and a space complexity of O(mn), since we need to store the number of unique paths for each cell in the grid. 
However, we can optimize the space complexity to O(n) by using a one-dimensional array instead of a two-dimensional array, since we only need to store the values 
for the current row and the previous row.


Fastest solution >

function uniquePaths(m: number, n: number): number {
  let row = [...new Array(n)].fill(1)

  for (let i = 0; i < m - 1; i++) {
    const newRow = [...new Array(n)].fill(1)
    for (let j = n - 2; j >= 0; j--) {
      newRow[j] = newRow[j + 1] + row[j]
    }
    row = newRow
  }

  return row[0]
}