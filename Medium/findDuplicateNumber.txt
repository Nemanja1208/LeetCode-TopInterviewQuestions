Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3


Solution >

function findDuplicate(nums: number[]): number {
  let slow = nums[0];
  let fast = nums[0];

  // Finding the intersection point of slow and fast pointers
  while (true) {
    slow = nums[slow];
    fast = nums[nums[fast]];
    if (slow === fast) {
      break;
    }
  }

  // Finding the start of the cycle (the repeated number)
  let ptr1 = nums[0];
  let ptr2 = slow;
  while (ptr1 !== ptr2) {
    ptr1 = nums[ptr1];
    ptr2 = nums[ptr2];
  }

  return ptr1;
}



Explanation >

We use the concept of cycle detection in a linked list to solve this problem.
The array nums represents a linked list, where the value at each index points to the next index.
We initialize two pointers, slow and fast, both pointing to the first element of the array.
We move slow one step at a time and fast two steps at a time. Eventually, they will meet at a certain index within the cycle.
Let's say the distance from the start of the array to the start of the cycle is x, and the distance from the start of the cycle to the meeting point is y.
The remaining distance from the meeting point to the start of the cycle is z.
When slow and fast meet, the distance covered by slow is x + y, and the distance covered by fast is x + y + z + y.
Since fast moves twice as fast as slow, we can express the distance covered by fast as 2(x + y) = x + y + z + y. This simplifies to x = z.
This means that if we move one pointer (ptr1) to the start of the array and keep the other pointer (ptr2) at the meeting point, 
and move both pointers one step at a time, they will eventually meet at the start of the cycle, which is the repeated number.
We return the value at the meeting point, which is the repeated number.
The solution has a time complexity of O(n) and uses constant extra space, as required.

Fastest solution >

function findDuplicate(nums: number[]): number {
    let slow = 0;
    let fast = 0;
    do  {
        fast = nums[fast];
        fast = nums[fast];
        slow = nums[slow];
    } while (fast !== slow);
    fast = 0;
    while (fast !== slow) {
        fast = nums[fast];
        slow = nums[slow];
    }
    return fast;
};