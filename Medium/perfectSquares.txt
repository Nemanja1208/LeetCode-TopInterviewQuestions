Given an integer n, return the least number of perfect square numbers that sum to n.

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. 
For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.

Example 1:
Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.

Example 2:
Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.


Solution >

function numSquares(n: number): number {
  // Create an array to store the minimum number of perfect squares required for each number from 0 to n
  const dp: number[] = Array(n + 1).fill(Number.MAX_VALUE);
  
  // Base case: 0 requires 0 perfect squares
  dp[0] = 0;

  // Iterate through each number from 1 to n
  for (let i = 1; i <= n; i++) {
    // Check for each possible square number that is less than or equal to i
    for (let j = 1; j * j <= i; j++) {
      // Update the minimum number of perfect squares required for i
      dp[i] = Math.min(dp[i], dp[i - j * j] + 1);
    }
  }
  
  // Return the minimum number of perfect squares required for n
  return dp[n];
}


Explanation >

We define a function numSquares that takes an integer n as input and returns the minimum number of perfect squares required to sum up to n.

We create an array dp of size n + 1 to store the minimum number of perfect squares required for each number from 0 to n. 
We initialize all elements of dp with a large value Number.MAX_VALUE as a placeholder.

We set the base case dp[0] = 0 because 0 requires 0 perfect squares.

We iterate through each number from 1 to n using a for loop.

Inside the outer loop, we have an inner loop that checks for each possible square number j * j that is less than or equal to the current number i.

We update the minimum number of perfect squares required for i by comparing the current value of dp[i] with dp[i - j * j] + 1. 
The dp[i - j * j] represents the minimum number of perfect squares required for the remaining sum after subtracting j * j, 
and we add 1 to account for the current perfect square j * j.

After completing both loops, we have calculated the minimum number of perfect squares required for each number from 0 to n.

Finally, we return dp[n], which represents the minimum number of perfect squares required to sum up to the given integer n.

For example, let's consider the input n = 12.

We initialize the dp array as [Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity].

The base case dp[0] = 0 remains unchanged.

We start the outer loop and consider the number 1. The inner loop checks for all possible square numbers less than or equal to 1, but there are none.

We move to the number 2. The inner loop checks for all possible square numbers less than or equal to 2, but again, there are none.

We continue this process for all numbers up to 12. The inner loop will find the square numbers 1, 4, and 9 for the respective numbers 4, 9, and 12.

The minimum number of perfect squares required for 12 is updated as follows:

dp[12] = Math.min(dp[12], dp[12 - 1 * 1] + 1) => dp[12] = Math.min(Infinity, dp[11] + 1) => dp[12] = Math.min(Infinity, Infinity + 1) => dp[12] = Infinity
dp[12] = Math.min(dp[12], dp[12 - 2 * 2] + 1) => dp[12] = Math.min(Infinity, dp[8] + 1) => dp[12] = Math.min(Infinity, Infinity + 1) => dp[12] = Infinity
dp[12] = Math.min(dp[12], dp[12 - 3 * 3] + 1) => dp[12] = Math.min(Infinity, dp[3] + 1) => dp[12] = Math.min(Infinity, 0 + 1) => dp[12] = 1
After completing the loops, the dp array becomes [0, Infinity, Infinity, 1, Infinity, 2, Infinity, 3, 4, Infinity, Infinity, 2, Infinity].

The function returns dp[12], which is 3. This means the least number of perfect squares required to sum up to 12 is 3 (i.e., 4 + 4 + 4).

Similarly, you can test the solution with other inputs, such as n = 13, and it will return the correct output as explained in the problem statement.

Fastest solution >

function numSquares(n: number): number {
  // write your code here
  let sqrt = Math.sqrt(n);
  if (sqrt % 1 === 0) {
    return 1;
  }
  while (n % 4 == 0) n /= 4;
  if (n % 8 == 7) return 4;
  let i = 1;
  let j = 0;
  for (i = 1; i * i <= n; i++) {
    j = Math.sqrt(n - i * i);
    if (j % 1 === 0) {
      return 2;
    }
  }
  return 3;
}