You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents 
your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.

Solution >

function canJump(nums: number[]): boolean {
  let maxIndex = 0;
  for (let i = 0; i < nums.length; i++) {
    if (i > maxIndex) {
      return false; // can't reach this index
    }
    maxIndex = Math.max(maxIndex, i + nums[i]); // update max index we can reach
    if (maxIndex >= nums.length - 1) {
      return true; // we can reach the last index
    }
  }
  return false; // can't reach the last index
}

Explanation > 

The function takes in an array of integers nums and returns a boolean indicating whether we can reach the last index or not. 
We start by initializing a variable maxIndex to 0, which represents the maximum index we can reach so far. 
We then iterate through the array using a for loop, starting from index 0 and going up to the last index.

For each index i, we check if we can't reach it from the previous indices by comparing i with maxIndex. 
If i is greater than maxIndex, that means we can't reach i and therefore can't reach the last index, so we return false.

Otherwise, we update maxIndex to the maximum value between its current value and i + nums[i], which represents the maximum index we can reach from i. 
If maxIndex is greater than or equal to the last index of the array (nums.length - 1), that means we can reach the last index, so we return true.

If we finish iterating through the array and haven't returned true yet, that means we can't reach the last index, so we return false.

Fastest solution - same