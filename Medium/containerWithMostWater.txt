You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104



Solution >

function maxArea(height: number[]): number {
    let maxArea = 0, left = 0, right = height.length - 1;
    while (left < right) {
        maxArea = Math.max(maxArea, Math.min(height[left], height[right]) * (right - left));
        if (height[left] < height[right]) {
            left++;
        } else {
            right--;
        }
    }
    return maxArea;
}

Explanation >

Initialize two pointers, left and right, that point to the start and end of the height array, respectively.
Calculate the area of the container formed by the left and right pointers, and store the maximum area seen so far in the maxArea variable.
Move the pointer with the smaller height towards the other pointer, because a larger height would increase the area of the container.
Repeat steps 2 and 3 until left and right meet, and return maxArea as the result.


Fastest Solution

function maxArea(height: number[]): number {
    let left = 0
    let right = height.length - 1

    let max = 0

    while (left < right) {
        let w = right - left
        let h = Math.min(height[left], height[right])
        if (h*w > max) {
            max = h*w
        }
        if (height[left] >= height[right]) {
            right--
        } else {
            left++
        }
    }
    return max
};