Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problem in O(1) extra space complexity and O(n) time complexity.

Example 1:
Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]

Example 2:
Input: head = [2,1,3,5,6,4,7]
Output: [2,3,6,7,1,5,4]
 

Constraints:

The number of nodes in the linked list is in the range [0, 104].
-106 <= Node.val <= 106


Solution >

function oddEvenList(head: ListNode | null): ListNode | null {
  if (!head || !head.next) {
    return head;
  }

  let oddPtr = head;
  let evenPtr = head.next;
  const evenHead = evenPtr;

  while (evenPtr && evenPtr.next) {
    oddPtr.next = evenPtr.next;
    oddPtr = oddPtr.next;
    evenPtr.next = oddPtr.next;
    evenPtr = evenPtr.next;
  }

  oddPtr.next = evenHead;

  return head;
}

Explanation >

Define the ListNode class, which represents a node in the linked list. Each node will have a value and a next pointer.
Implement the oddEvenList function, which takes the head of the linked list as input and returns the reordered list.
Handle the base cases: if the linked list is empty or has only one node, we can return the head as it is.
Initialize two pointers, oddPtr and evenPtr, to keep track of the odd and even nodes, respectively. 
Also, keep a reference to the first even node (evenHead) to link it later with the last odd node.
Iterate through the linked list, starting from the head node, using a while loop. Inside the loop, we'll update the pointers and reorganize the nodes.
For each iteration, we first assign the next node to the odd pointer's next and update the odd pointer itself.
Then, we assign the next node of the odd pointer to the even pointer's next and update the even pointer.
Finally, we move to the next odd node by updating the odd pointer to its next.
After the loop, we've divided the original list into two parts: odd nodes and even nodes.
Link the last odd node to the first even node by assigning evenHead to the next of the last odd node.
Return the head of the modified linked list.


Fastest solution >

function oddEvenList(head: ListNode | null): ListNode | null {
    if(!head) return null
    let odd = head
    let even = head.next
    let evenHead = even

    while(even && even.next){
        odd.next = even.next
        odd = odd.next
        even.next = odd.next
        even = even.next
    }

    odd.next = evenHead
    return head 
};