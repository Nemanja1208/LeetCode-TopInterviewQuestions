Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q 
as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

Example 3:
Input: root = [1,2], p = 1, q = 2
Output: 1

Solution >

/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     val: number
 *     left: TreeNode | null
 *     right: TreeNode | null
 *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {
 *         this.val = (val===undefined ? 0 : val)
 *         this.left = (left===undefined ? null : left)
 *         this.right = (right===undefined ? null : right)
 *     }
 * }

function lowestCommonAncestor(root: TreeNode | null, p: TreeNode, q: TreeNode): TreeNode | null {
  if (root === null || root === p || root === q) {
    return root;
  }

  const left = lowestCommonAncestor(root.left, p, q);
  const right = lowestCommonAncestor(root.right, p, q);

  if (left !== null && right !== null) {
    return root;
  }

  return left !== null ? left : right;
}

Explanation >

We define a TreeNode class to represent each node in the binary tree. Each node has a value (val) and references to its left and right child nodes (left and right).

The lowestCommonAncestor function takes three parameters: the root of the binary tree (root), and the two nodes (p and q) for which we want to find the LCA.

In the function, we first handle the base cases. If the current node is null or if it is either p or q, we return the current node as the LCA.

Next, we recursively call the lowestCommonAncestor function on the left and right subtrees of the current node.

If both the left and right recursive calls return a non-null value, it means that p and q are found in different subtrees, and the current node is the LCA. So, we return the current node.

If only one of the left or right recursive calls returns a non-null value, it means that both p and q are found in the same subtree. In this case, we return the non-null value (which represents the LCA of p and q).

If both the left and right recursive calls return null, it means that neither p nor q are found in the current subtree. So, we return null to indicate that the LCA was not found.

You can use this lowestCommonAncestor function by creating a binary tree using the TreeNode class and passing the root node along with the two nodes p and q that you want to find the LCA for.

Fastest solution >

function lowestCommonAncestor(root: TreeNode | null, p: TreeNode | null, q: TreeNode | null): TreeNode | null {
    if (!root) {
        return null;
    }
    
    if (root.val === p.val || root.val === q.val) {
        return root;
    }

    let leftResult = lowestCommonAncestor(root.left, p, q);
    let rightResult = lowestCommonAncestor(root.right, p, q);

    if (!leftResult && !rightResult) {
        return null;
    }
    if (leftResult && rightResult) {
        return root;
    }
    if (leftResult && !rightResult) {
        return leftResult;
    }
    if (!leftResult && rightResult) {
        return rightResult;
    }
};