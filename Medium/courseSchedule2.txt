There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, 
return any of them. If it is impossible to finish all courses, return an empty array.

Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].

Example 2:
Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. 
Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].

Example 3:
Input: numCourses = 1, prerequisites = []
Output: [0]

Solution >

function findOrder(numCourses: number, prerequisites: number[][]): number[] {
  // Create an adjacency list to represent the courses and their dependencies
  const adjacencyList: number[][] = new Array(numCourses).fill(null).map(() => []);

  // Create an array to track the in-degree of each course
  const inDegree: number[] = new Array(numCourses).fill(0);

  // Build the adjacency list and calculate the in-degree of each course
  for (const [course, prerequisite] of prerequisites) {
    adjacencyList[prerequisite].push(course);
    inDegree[course]++;
  }

  // Create a queue to store courses with zero in-degree
  const queue: number[] = [];
  for (let i = 0; i < numCourses; i++) {
    if (inDegree[i] === 0) {
      queue.push(i);
    }
  }

  // Perform topological sorting
  const order: number[] = [];
  while (queue.length > 0) {
    const course = queue.shift()!;
    order.push(course);

    // Decrease the in-degree of courses that depend on the current course
    for (const dependentCourse of adjacencyList[course]) {
      inDegree[dependentCourse]--;
      if (inDegree[dependentCourse] === 0) {
        queue.push(dependentCourse);
      }
    }
  }

  // If the order contains all courses, return the order; otherwise, it's impossible to finish all courses
  return order.length === numCourses ? order : [];
}


Explanation >

We start by creating an adjacency list to represent the courses and their dependencies. 
The adjacencyList is an array of arrays, where each index represents a course, and the inner array represents the courses that depend on the current course.

We also create an array called inDegree to track the in-degree of each course. In-degree represents the number of dependencies a course has.

We iterate over the prerequisites array and populate the adjacencyList and inDegree arrays accordingly. 
For each prerequisite pair [ai, bi], we add ai to the adjacency list of bi, indicating that ai depends on bi. 
We also increment the in-degree of ai since it has a dependency.

Next, we create a queue and initialize it with the courses that have zero in-degree. 
Zero in-degree means that these courses have no dependencies and can be taken as the first courses.

Now we perform the topological sorting algorithm. We continue iterating while the queue is not empty.

In each iteration, we dequeue a course from the front of the queue and add it to the order array, representing the order in which the courses should be taken.

We then iterate over the courses that depend on the dequeued course and decrease their in-degree by 1. 
If a dependent course's in-degree becomes zero, it means all its dependencies have been satisfied, so we enqueue it.

Finally, after the topological sorting is complete, we check if the order array contains all the courses. 
If it does, we return the order; otherwise, it means it's impossible to finish all courses, so we return an empty array.

You can use this findOrder function to solve the problem by providing the number of courses (numCourses) and the prerequisites array (prerequisites). 
It will return the order in which the courses should be taken, or an empty array if it's

Fastest solution >

function findOrder(numCourses: number, prerequisites: number[][]): number[] {
    const sequence = [];
    const pMap = new Array<number[]>(numCourses);
    const visited = new Array<number>(numCourses);
    visited.fill(0); // new: 0, busy: 1, done: 2
    prerequisites.forEach(p => {
       if(pMap[p[0]]){
           pMap[p[0]].push(p[1]);
       } else {
           pMap[p[0]] = [p[1]];
       }
    });
    
    let hasCycle = false;
    const dfsVisit = courseId => {
        if(visited[courseId] === 0){
            visited[courseId] = 1;
            if(pMap[courseId]){
                pMap[courseId].forEach(dep => {
                    dfsVisit(dep);
                });
            }
            sequence.push(courseId);
            visited[courseId] = 2;
        } else if(visited[courseId] === 1){
            hasCycle = true;
        }
    }
    for(let i = 0; i < numCourses && !hasCycle; i++){
        dfsVisit(i);
    }
    return hasCycle ? [] : sequence;
};