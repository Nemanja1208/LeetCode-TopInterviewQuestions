A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.

Example 1:
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

Example 2:
Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

Solution >

function findPeakElement(nums: number[]): number {
  let left = 0;
  let right = nums.length - 1;

  while (left < right) {
    const mid = Math.floor((left + right) / 2);

    if (nums[mid] > nums[mid + 1]) {
      // The peak is on the left side
      right = mid;
    } else {
      // The peak is on the right side
      left = mid + 1;
    }
  }

  return left;
}


Explanation >

The algorithm uses a binary search approach to find a peak element efficiently in O(log n) time.

We initialize two pointers, left and right, representing the start and end indices of the search range, respectively. 
Initially, left is set to 0, and right is set to the last index (nums.length - 1).

Inside the while loop, we calculate the middle index mid using the formula (left + right) / 2. We round it down to the nearest integer using Math.floor().

We compare nums[mid] with its right neighbor nums[mid + 1]. If nums[mid] is greater, it means the peak element is on the left side of mid. 
Thus, we update right to mid to search in the left half of the array.

If nums[mid] is not greater than nums[mid + 1], it means the peak element is on the right side of mid. We update left to mid + 1 to search in the right half of the array.

We repeat steps 2-4 until left is equal to right. This indicates that we have found a peak element, as the search range has narrowed down to a single element.

Finally, we return the left index as the index of the peak element.

The binary search approach works because of the given condition that nums[-1] and nums[n] (where n is the length of nums) 
are considered to be negative infinity. Therefore, as we move towards a higher element in the array, we will eventually reach a peak element. 
By comparing the middle element with its neighbor, we can narrow down the search range to the side with the higher element, 
ensuring that we converge on a peak element efficiently.

Fastest solution >

function findPeakElement(nums: number[]): number {
	const len = nums.length;
	if (len === 1) {
		return 0;
	}

	let l = 0;
	let r = len - 1;
	while (r >= l) {
		const m = l + Math.floor((r - l) / 2);
		const valM = nums[m];
		const valML = m - 1 >= 0 ? nums[m - 1] : -Infinity;
		const valMR = m + 1 < len ? nums[m + 1] : -Infinity;
		if (valM > valML && valM > valMR) {
			// Found a peak!
			return m;
		} else {
			// Continue where the slope is ascending (certainty to find a peak there).
			if (valML > valM) {
				r = m - 1;
			} else {
				l = m + 1;
			}
		}
	}

	return -1;
}