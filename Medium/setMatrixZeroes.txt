Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

You must do it in place.

Example 1:
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]

Example 2:
Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]


Solution >

function setZeroes(matrix: number[][]): void {
    const m = matrix.length;
    const n = matrix[0].length;
    let firstRowZero = false; // flag to check if the first row has zero
    let firstColZero = false; // flag to check if the first column has zero

    // Check if the first row has any zero
    for (let j = 0; j < n; j++) {
        if (matrix[0][j] === 0) {
            firstRowZero = true;
            break;
        }
    }

    // Check if the first column has any zero
    for (let i = 0; i < m; i++) {
        if (matrix[i][0] === 0) {
            firstColZero = true;
            break;
        }
    }

    // Check for zeros in the rest of the matrix and set corresponding flags in first row and column
    for (let i = 1; i < m; i++) {
        for (let j = 1; j < n; j++) {
            if (matrix[i][j] === 0) {
                matrix[i][0] = 0;
                matrix[0][j] = 0;
            }
        }
    }

    // Set zeros in the rest of the matrix based on flags in the first row and column
    for (let i = 1; i < m; i++) {
        for (let j = 1; j < n; j++) {
            if (matrix[i][0] === 0 || matrix[0][j] === 0) {
                matrix[i][j] = 0;
            }
        }
    }

    // Set zeros in the first row and column if required
    if (firstRowZero) {
        for (let j = 0; j < n; j++) {
            matrix[0][j] = 0;
        }
    }
    if (firstColZero) {
        for (let i = 0; i < m; i++) {
            matrix[i][0] = 0;
        }
    }
}


Explanation >

The above solution takes an m x n integer matrix as input and modifies it in place to set entire rows and columns to 0's 
if any element in the corresponding row or column is 0.

The solution works by first checking if the first row and column have any zeros and setting flags accordingly. 
Then it scans the rest of the matrix and sets flags in the first row and column if any element is 0. 
Finally, it scans the matrix again and sets zeros in the rest of the matrix based on the flags in the first row and column. 
If the first row or column had any zeros initially, it sets zeros in the corresponding rows and columns at the end.

This solution has a time complexity of O(mn) and a space complexity of O(1) since it modifies the input matrix in place without using any extra space.

Fastest solution >

function setZeroes(matrix: number[][]): void {
    let zeroZerothColumn = false;
    for (let i=0; i<matrix.length; i++) {
        if (matrix[i][0] === 0) zeroZerothColumn = true;
        for (let j=1; j<matrix[i].length; j++) {
            if (matrix[i][j] === 0) {
                matrix[0][j] = 0;
                matrix[i][0] = 0;
            }
        }
    }
    for (let i=1; i<matrix.length; i++) {
        const setRowToZero = matrix[i][0] === 0;
        for (let j=1; j<matrix[0].length; j++) {
            const setColumnToZero = matrix[0][j] === 0;
            if (setRowToZero || setColumnToZero) matrix[i][j] = 0;
        }
    }

    if (matrix[0][0] === 0) {
        for (let j=0; j<matrix[0].length; j++){ matrix[0][j] = 0; }
    }
    if (zeroZerothColumn) {
        for (let i=0; i<matrix.length; i++){ matrix[i][0] = 0; }
    }
};

