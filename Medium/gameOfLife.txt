According to Wikipedia's article: "The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970."

The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). 
Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):

Any live cell with fewer than two live neighbors dies as if caused by under-population.
Any live cell with two or three live neighbors lives on to the next generation.
Any live cell with more than three live neighbors dies, as if by over-population.
Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. 
Given the current state of the m x n grid board, return the next state.

Example 1:
Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]

Example 2:
Input: board = [[1,1],[1,0]]
Output: [[1,1],[1,1]]
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 25
board[i][j] is 0 or 1.
 

Follow up:

Could you solve it in-place? Remember that the board needs to be updated simultaneously: 
You cannot update some cells first and then use their updated values to update other cells.
In this question, we represent the board using a 2D array. In principle, the board is infinite, 
which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?

Solution >

function gameOfLife(board: number[][]): number[][] {
  const m = board.length;
  const n = board[0].length;

  // Helper function to count live neighbors
  const countLiveNeighbors = (row: number, col: number): number => {
    let liveNeighbors = 0;
    const directions = [
      [-1, -1], [-1, 0], [-1, 1],
      [0, -1],           [0, 1],
      [1, -1],  [1, 0],  [1, 1]
    ];

    for (const [dx, dy] of directions) {
      const newRow = row + dx;
      const newCol = col + dy;

      if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n) {
        liveNeighbors += board[newRow][newCol] & 1;
      }
    }

    return liveNeighbors;
  };

  // Update the board state
  for (let row = 0; row < m; row++) {
    for (let col = 0; col < n; col++) {
      const liveNeighbors = countLiveNeighbors(row, col);

      if (board[row][col] === 1 && (liveNeighbors === 2 || liveNeighbors === 3)) {
        // Live cell with 2 or 3 live neighbors stays alive
        board[row][col] |= 2;
      }

      if (board[row][col] === 0 && liveNeighbors === 3) {
        // Dead cell with 3 live neighbors becomes alive
        board[row][col] |= 2;
      }
    }
  }

  // Update the board with the new state
  for (let row = 0; row < m; row++) {
    for (let col = 0; col < n; col++) {
      board[row][col] >>= 1;
    }
  }

  return board;
}


Explanation >

The gameOfLife function takes the input board as a 2D array of numbers and returns the updated state of the board.
We first initialize variables m and n to store the dimensions of the board.
The countLiveNeighbors helper function calculates the number of live neighbors for a given cell at coordinates (row, col).
Inside the countLiveNeighbors function, we define directions as an array of 8 possible directions to check the neighbors (horizontal, vertical, and diagonal).
We iterate through each direction and check if the coordinates of the neighbor are within the valid range. 
If so, we increment the liveNeighbors count if the neighbor cell is alive (1).
In the main part of the code, we iterate through each cell in the board using nested loops.
For each cell, we count the number of live neighbors using the countLiveNeighbors function.
If the current cell is alive (1) and has either 2 or 3 live neighbors, we set the second bit of the cell value to 1 (using the bitwise OR operator |=), 
indicating that it will be alive in the next state.
If the current cell is dead (0) and has exactly 3 live neighbors, we set the second bit of the cell value to 1, indicating that it will become alive in the next state.
After updating the state for all cells, we need to shift the values to the right by 1 bit (>>=) to get the updated state of each cell in the first bit 
(since the second bit was used for temporary storage during the update).
Finally, we return the updated board.
This solution solves the problem in-place because it updates the cell values of the original board directly. 
The new state is calculated based on the current state of the cells, 
ut we use the second bit of the cell value to store the updated state temporarily before shifting it back to the first bit. 
This way, we ensure that all cells are updated simultaneously and the updated values are used correctly for calculating the next state.

Regarding the issue of an infinite board and cells reaching the border, the provided solution assumes a finite board with dimensions m x n. 
If you want to handle an infinite board, you would need to implement a different approach, 
such as dynamically expanding the board as needed or using an alternative data structure that allows for infinite space representation, such as a sparse matrix.

Fastest solution >

function gameOfLife(board: number[][]): void {
    // 2 = dead to alive
    // 3 = alive to dead
    for (let i = 0; i < board.length; i++) {
        for (let j = 0; j < board[0].length; j++) {
            let liveNeighbors = countLiveNeighbors(i, j);

            if (board[i][j] === 0 && liveNeighbors === 3) {
                board[i][j] = 2;
                continue;
            } 

            if (board[i][j] === 1 && (liveNeighbors < 2 || liveNeighbors > 3)) board[i][j] = 3;
             
        }
    }

    function countLiveNeighbors(row: number, col: number) {
        let res = 0;
        if (row - 1 >=  0) {
            if (col - 1 >= 0 && (board[row - 1][col - 1] === 1 || board[row - 1][col - 1] === 3)) res++;
            if (col + 1 < board[0].length && (board[row - 1][col + 1] === 1 || board[row - 1][col + 1] === 3)) res++;
            if (board[row - 1][col] === 1 || board[row - 1][col] === 3) res++;
        }

        if (row + 1 < board.length) {
            if (col - 1 >= 0 && (board[row + 1][col - 1] === 1 || board[row + 1][col - 1] === 3)) res++;
            if (col + 1 < board[0].length && (board[row + 1][col + 1] === 1 || board[row + 1][col + 1] === 3)) res++;
            if (board[row + 1][col] === 1 || board[row + 1][col] === 3) res++;
        }

        if (col - 1 >= 0 && (board[row][col - 1] === 1 || board[row][col - 1] === 3)) res++;

        if (col + 1 < board[0].length && (board[row][col + 1] === 1 || board[row][col + 1] === 3)) res++;


        return res;
    }

    for (let i = 0; i < board.length; i++) {
        for (let j = 0; j < board[0].length; j++) {
            if (board[i][j] === 2) board[i][j] = 1;
            else if (board[i][j] === 3) board[i][j] = 0;
        }
    }
};