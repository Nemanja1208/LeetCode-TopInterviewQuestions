Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals,
and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

Solution >

function merge(intervals: number[][]): number[][] {
  if (intervals.length <= 1) {
    return intervals;
  }

  // Sort the intervals based on their starting point
  intervals.sort((a, b) => a[0] - b[0]);

  const result: number[][] = [];
  let currentInterval = intervals[0];

  for (let i = 1; i < intervals.length; i++) {
    const nextInterval = intervals[i];

    // If the next interval overlaps with the current interval, merge them
    if (nextInterval[0] <= currentInterval[1]) {
      currentInterval[1] = Math.max(currentInterval[1], nextInterval[1]);
    }
    // Otherwise, add the current interval to the result and update the current interval
    else {
      result.push(currentInterval);
      currentInterval = nextInterval;
    }
  }

  // Add the last interval to the result
  result.push(currentInterval);

  return result;
}

Explanation >

The idea behind the solution is to sort the intervals based on their starting point, and then iterate through the sorted intervals one by one. 
We keep track of a currentInterval variable, which represents the interval we are currently merging or adding to the result. 
For each interval nextInterval that we encounter, we check if it overlaps with currentInterval. 
If it does, we merge the two intervals by updating the end point of currentInterval to be the maximum of its current end point and the end point of nextInterval. 
If it doesn't overlap, we add currentInterval to the result and update currentInterval to be nextInterval.

At the end of the loop, we add the last interval to the result (since we wouldn't have done that inside the loop).

The time complexity of this solution is O(n log n), where n is the number of intervals, because of the initial sorting step. 
The space complexity is O(n) because we create a new result array to store the merged intervals.


Fastest Solution >

function merge(intervals: number[][]): number[][] {
    intervals.sort((a, b) => a[0] - b[0])
    const result: number[][] = []

    let prev = intervals[0];
    for (let i = 1; i < intervals.length; i++) {
        const curr = intervals[i]
        if (curr[0] <= prev[1]) {
            prev[1] = Math.max(prev[1], curr[1])
        } else {
            result.push(prev)
            prev = curr
        }
    }
    result.push(prev)

    return result;
};