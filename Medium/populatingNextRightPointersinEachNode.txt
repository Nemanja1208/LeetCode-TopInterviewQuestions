You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

Example 1:
Input: root = [1,2,3,4,5,6,7]
Output: [1,#,2,3,#,4,5,6,7,#]
Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. 
The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.

Example 2:
Input: root = []
Output: []


Solution >

function connect(root: Node | null): Node | null {
  if (!root) {
    return root;
  }
  
  let leftmost = root;
  while (leftmost.left) {
    let head = leftmost;
    while (head) {
      head.left.next = head.right;
      if (head.next) {
        head.right.next = head.next.left;
      }
      head = head.next;
    }
    leftmost = leftmost.left;
  }
  
  return root;
}

Explanation >

The connect function takes a root node as input and populates the next pointers of the nodes in the tree to point to their next right nodes.

The function first checks if the input root is null. If it is, the function simply returns null. Otherwise, it initializes a variable leftmost to the input root.

The function then enters a loop that iterates through each level of the binary tree, starting from the top level and working its way down to the bottom level. 
For each level, the function initializes a variable head to leftmost, which represents the leftmost node of the current level.

The function then iterates through each node of the current level, starting from head and moving to the right using the next pointers. 
For each node, the function populates its next pointer to point to its next right node. 
This is done by setting the left node's next pointer to its right node, and setting the right node's next pointer to the next node's left node, 
if the next node exists. This process connects the nodes on the current level.

After iterating through all nodes of the current level, the function updates head to the next node in the level by setting it to its next pointer. 
The outer loop then updates leftmost to the leftmost node of the next level by setting it to its left child.

The function continues this process until it has connected all nodes in the tree, at which point it returns the root node.

In summary, this solution uses a nested loop to traverse the binary tree and populate the next pointers of its nodes to point to their next right nodes.

Fastest solution >

function connect(root: Node | null): Node | null {
    if(!root) return root;

    const queue: Node[] = [root];
    let lvlCount = 1;

    while(queue.length) {
        const node = queue.shift();

        if(node.left) queue.push(node.left);

        if(node.right) queue.push(node.right);

        lvlCount--;

        if(lvlCount === 0) {
            node.next = null;
            lvlCount = queue.length;
            continue;
        };

        node.next = queue[0];
    };

    return root;
};