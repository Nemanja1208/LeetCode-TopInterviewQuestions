Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....

You may assume the input array always has a valid answer.

Example 1:
Input: nums = [1,5,1,1,6,4]
Output: [1,6,1,5,1,4]
Explanation: [1,4,1,5,1,6] is also accepted.

Example 2:
Input: nums = [1,3,2,2,3,1]
Output: [2,3,1,3,1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
0 <= nums[i] <= 5000
It is guaranteed that there will be an answer for the given input nums.
 

Follow Up: Can you do it in O(n) time and/or in-place with O(1) extra space?


Solution >

function wiggleSort(nums: number[]): void {
    const n = nums.length;
    
    // Step 1: Find the median element
    const median = findMedian(nums);

    // Step 2: Rearrange the elements into a "wiggle" pattern
    let i = 0; // index for smaller elements
    let j = 0; // index for equal elements
    let k = n - 1; // index for larger elements
    
    while (j <= k) {
        if (nums[newIndex(j, n)] > median) {
            swap(nums, newIndex(i++, n), newIndex(j++, n));
        } else if (nums[newIndex(j, n)] < median) {
            swap(nums, newIndex(j, n), newIndex(k--, n));
        } else {
            j++;
        }
    }
}

// Helper function to find the median element
function findMedian(nums: number[]): number {
    const sorted = nums.slice().sort((a, b) => a - b);
    const n = nums.length;
    const medianIndex = Math.floor((n + 1) / 2) - 1;
    return sorted[medianIndex];
}

// Helper function to compute the new index for the wiggle pattern
function newIndex(index: number, n: number): number {
    return (1 + 2 * index) % (n | 1);
}

// Helper function to swap two elements in an array
function swap(nums: number[], i: number, j: number): void {
    const temp = nums[i];
    nums[i] = nums[j];
    nums[j] = temp;
}



Explanation >

The wiggleSort function takes in the nums array and rearranges its elements in a "wiggle" pattern.
We first find the median element of the array using the findMedian helper function. 
This can be done in O(n log n) time complexity by sorting the array and selecting the middle element.
After finding the median, we rearrange the elements of the array using three pointers: i, j, and k. 
The i pointer keeps track of the index for smaller elements, the j pointer iterates through the array, and the k pointer keeps track of the index for larger elements.
We iterate through the array using the j pointer. If the current element is greater than the median, we swap it with the element at the i index and increment both i and j. 
If the current element is less than the median, we swap it with the element at the k index and decrement k. If the current element is equal to the median, we simply increment j.
This rearrangement ensures that the smaller elements are placed in positions where nums[i] < nums[j], 
the larger elements are placed in positions where nums[j] < nums[k], and the equal elements are spread out throughout the array.
Finally, the array is reordered in the desired "wiggle" pattern.
The time complexity of this solution is O(n log n) due to the sorting step in finding the median. 
However, the actual rearrangement of the elements can be done in O(n) time complexity. 
The space complexity is O(1) as we are not using any additional space that grows with the input size.


Fastest solution >

function wiggleSort(nums: number[]): void {
	let end = nums.length - 1;
	let middle = Math.floor((nums.length - 1) / 2);
	const copy = [...nums].sort((a, b) => a - b);

	for (let i = 0; i < nums.length; i++) {
		if (i % 2 === 0) nums[i] = copy[middle--];
		else nums[i] = copy[end--];
	}
};