A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). 
For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

The test cases are generated so that the answer fits in a 32-bit integer.

Example 1:
Input: s = "12"
Output: 2
Explanation: "12" could be decoded as "AB" (1 2) or "L" (12).

Example 2:
Input: s = "226"
Output: 3
Explanation: "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).

Example 3:
Input: s = "06"
Output: 0
Explanation: "06" cannot be mapped to "F" because of the leading zero ("6" is different from "06").


Solution >

function numDecodings(s: string): number {
    const n = s.length;
    const dp = new Array(n + 1).fill(0);
    dp[0] = 1;
    dp[1] = s[0] !== "0" ? 1 : 0;
    for (let i = 2; i <= n; i++) {
        const oneDigit = Number(s.substring(i - 1, i));
        const twoDigit = Number(s.substring(i - 2, i));
        if (oneDigit >= 1 && oneDigit <= 9) {
            dp[i] += dp[i - 1];
        }
        if (twoDigit >= 10 && twoDigit <= 26) {
            dp[i] += dp[i - 2];
        }
    }
    return dp[n];
}


Explanation >

The variable n stores the length of the input string s.
The array dp is used to store the number of ways to decode the first i characters of the input string s.
We initialize dp[0] = 1 because there is only one way to decode an empty string, and dp[1] = 1 if the first character of the input string is not "0", because there is only one way to decode a single digit.
We iterate from i = 2 to i = n and consider two cases:
The first case is when we can decode the current character as a single digit. In this case, we add the number of ways to decode the first i-1 characters to dp[i].
The second case is when we can decode the current character as a two-digit number. In this case, we add the number of ways to decode the first i-2 characters to dp[i].
Finally, we return dp[n], which is the number of ways to decode the entire input string.

Fastest solution >

const numDecodings = (s: string): number => {
  if (s[0] === '0') {
    return 0;
  }

  let prevNum = 0;
  let currentNum = 1;

  for (let i = 0; i < s.length; i++) {
    if (
      (s[i] !== '1' && s[i] !== '2' && s[i + 1] === '0') ||
      (s[i - 1] === '0' && s[i] === '0')
    ) {
      return 0;
    }

    if (s[i + 1] === '0') {
      i += 1;
      prevNum = currentNum;
    } else if (
      s[i - 1] === '0' ||
      parseInt(`${s[i - 1]}${s[i]}`, 10) > 26
    ) {
      prevNum = currentNum;
    } else {
      const temp = currentNum;
      currentNum += prevNum;
      prevNum = temp;
    }
  }

  return currentNum;
};