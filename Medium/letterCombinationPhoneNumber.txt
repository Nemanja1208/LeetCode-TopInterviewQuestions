Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Check the image for details

https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png


Solution > 

function letterCombinations(digits: string): string[] {
  if (!digits.length) return [];
  const map = ['0', '1', 'abc', 'def', 'ghi', 'jkl', 'mno', 'pqrs', 'tuv', 'wxyz'];
  const result: string[] = [];

  function dfs(index: number, current: string) {
    if (index === digits.length) {
      result.push(current);
      return;
    }

    for (const char of map[+digits[index]]) {
      dfs(index + 1, current + char);
    }
  }

  dfs(0, '');
  return result;
}


Explanation > 

The function starts by checking if the input digits string is empty. If it is, we return an empty array because there are no combinations possible.

We define a map that maps each digit to its corresponding letters on a telephone keypad. For example, the digit 2 maps to 'abc'.

We declare an empty array result to store the final result.

The function dfs is a depth-first search algorithm that takes two arguments: index and current. 
index represents the current digit that we're processing and current represents the current combination of letters that we have built so far.

The base case for dfs is when index is equal to the length of digits. 
In this case, we have processed all the digits and have built a complete combination of letters. 
So, we push the current combination of letters to the result array and return.

In the for loop, we loop through each letter corresponding to the current digit in map. 
We call dfs recursively with index + 1 to process the next digit and current + char to append the current letter to the combination of letters.

Finally, we call dfs with index = 0 and current = '' to start the depth-first search algorithm.

After dfs returns, we return the result array, which contains all the possible letter combinations.


Fastest solution >

const MAPPING = {
  "2": "abc",
  "3": "def",
  "4": "ghi",
  "5": "jkl",
  "6": "mno",
  "7": "pqrs",
  "8": "tuv",
  "9": "wxyz",
};

function letterCombinations(digits: string): string[] {
  const possibleEncodings: string[] = [];
  function dfs(index: number, currentEncoding: string) {
    if (index === digits.length) {
      possibleEncodings.push(currentEncoding);
      return;
    }

    for (const letter of MAPPING[digits[index] as keyof typeof MAPPING]) {
      // currentEncoding.push(letter);
      dfs(index + 1, currentEncoding + letter);
      // currentEncoding.pop();
    }
  }

  if (digits.length) {
    dfs(0, "");
  }
  return possibleEncodings;
};
