Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
 

Constraints:

1 <= s.length <= 20
1 <= p.length <= 30
s contains only lowercase English letters.
p contains only lowercase English letters, '.', and '*'.
It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.



Solution :

function isMatch(s: string, p: string): boolean {
    let dp: boolean[][] = [];
    for (let i = 0; i <= s.length; i++) {
        dp.push(new Array(p.length + 1).fill(false));
    }
    dp[0][0] = true;

    // Initialize the dp table for patterns like a*b*c*
    for (let j = 1; j <= p.length; j++) {
        if (p[j - 1] === '*') {
            dp[0][j] = dp[0][j - 2];
        }
    }

    for (let i = 1; i <= s.length; i++) {
        for (let j = 1; j <= p.length; j++) {
            if (p[j - 1] === '.' || p[j - 1] === s[i - 1]) {
                dp[i][j] = dp[i - 1][j - 1];
            } else if (p[j - 1] === '*') {
                dp[i][j] = dp[i][j - 2];
                if (p[j - 2] === '.' || p[j - 2] === s[i - 1]) {
                    dp[i][j] = dp[i][j] || dp[i - 1][j];
                }
            }
        }
    }

    return dp[s.length][p.length];
}

Explanation >

The first step is to create a two-dimensional array dp to store the intermediate results of the matching process. The length of the first dimension is s.length + 1 and the length of the second dimension is p.length + 1.

Initialize the dp[0][0] to true because an empty string matches an empty pattern.

Initialize the first row of the dp table to handle cases where the pattern starts with *. For example, a pattern like a*b*c* matches an empty string.

Fill in the rest of the dp table using the following rules:

If the current characters in s and p match or if p[j - 1] is ., set dp[i][j] to dp[i - 1][j - 1]. 
This means that the current matching is successful and we can move on to the next characters in both strings.
If p[j - 1] is *, we have two options:
If the preceding character in p matches the current character in s or if the preceding character in p is ., set dp[i][j] to dp[i - 1][j]. 
This means that the current * in p matches one or more characters in s.
If the preceding character in p doesn't match the current character in s and the preceding character in p is not ., set dp[i][j] to dp[i][j - 2]. 
This means that the current * in `p


Fastest solution :
var isMatch = function (s, p) {
    const rows = s.length;
    const columns = p.length;
    /// Base conditions
    if (rows == 0 && columns == 0) {
        return true;
    }
    if (columns == 0) {
        return false;
    }
    // DP array
    const dp = Array.from({ length: s.length + 1 }, () => [false]);
    // Empty string and empty pattern are a match
    dp[0][0] = true;
    // Deals with patterns with *
    for (let i = 1; i < columns + 1; i++) {
        if (p[i - 1] === '*') {
            dp[0][i] = dp[0][i - 2];
        }
        else {
            dp[0][i] = false;
        };
    }
    // For remaining characters
    for (let i = 1; i < rows + 1; i++) {
        for (let j = 1; j < columns + 1; j++) {
            if (p[j - 1] === '*') {
                if (p[j - 2] === s[i - 1] || p[j - 2] === '.') {
                    dp[i][j] = dp[i][j - 2] || dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i][j - 2];
                }
            } else if (p[j - 1] === s[i - 1] || p[j - 1] === '.') {
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                dp[i][j] = false;
            }
        }
    }
    return dp[rows][columns];
};