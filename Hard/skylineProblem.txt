A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. 
Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.

The geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:

lefti is the x coordinate of the left edge of the ith building.
righti is the x coordinate of the right edge of the ith building.
heighti is the height of the ith building.
You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.

The skyline should be represented as a list of "key points" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. 
Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, 
which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. 
Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.

Note: There must be no consecutive horizontal lines of equal height in the output skyline. 
For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output 
as such: [...,[2 3],[4 5],[12 7],...]

Example 1:
Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]
Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]
Explanation:
Figure A shows the buildings of the input.
Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.

Example 2:
Input: buildings = [[0,2,3],[2,5,3]]
Output: [[0,3],[5,0]]


Solution >

function getSkyline(buildings: number[][]): number[][] {
  // Base case: If there are no buildings, return an empty skyline
  if (buildings.length === 0) {
    return [];
  }

  // Recursive case: Divide the buildings into two halves
  const n = buildings.length;
  if (n === 1) {
    const [left, right, height] = buildings[0];
    return [[left, height], [right, 0]];
  }

  const leftSkyline = getSkyline(buildings.slice(0, Math.floor(n / 2)));
  const rightSkyline = getSkyline(buildings.slice(Math.floor(n / 2)));

  // Merge the left and right skylines
  return mergeSkylines(leftSkyline, rightSkyline);
}

function mergeSkylines(leftSkyline: number[][], rightSkyline: number[][]): number[][] {
  const mergedSkyline: number[][] = [];
  let leftIndex = 0;
  let rightIndex = 0;
  let leftY = 0;
  let rightY = 0;
  let currentY = 0;

  while (leftIndex < leftSkyline.length && rightIndex < rightSkyline.length) {
    const leftPoint = leftSkyline[leftIndex];
    const rightPoint = rightSkyline[rightIndex];
    let x = 0;
    let maxY = 0;

    if (leftPoint[0] < rightPoint[0]) {
      x = leftPoint[0];
      leftY = leftPoint[1];
      maxY = Math.max(leftY, rightY);
      leftIndex++;
    } else if (leftPoint[0] > rightPoint[0]) {
      x = rightPoint[0];
      rightY = rightPoint[1];
      maxY = Math.max(leftY, rightY);
      rightIndex++;
    } else {
      x = leftPoint[0];
      leftY = leftPoint[1];
      rightY = rightPoint[1];
      maxY = Math.max(leftY, rightY);
      leftIndex++;
      rightIndex++;
    }

    if (currentY !== maxY) {
      updateSkyline(mergedSkyline, x, maxY);
      currentY = maxY;
    }
  }

  appendSkyline(mergedSkyline, leftSkyline, leftIndex, currentY);
  appendSkyline(mergedSkyline, rightSkyline, rightIndex, currentY);

  return mergedSkyline;
}

function updateSkyline(skyline: number[][], x: number, y: number): void {
  if (skyline.length === 0 || skyline[skyline.length - 1][0] !== x) {
    skyline.push([x, y]);
  } else {
    skyline[skyline.length - 1][1] = y;
  }
}

function appendSkyline(
  skyline: number[][],
  source: number[][],
  index: number,
  currentY: number
): void {
  while (index < source.length) {
    const [x, y] = source[index];
    if (currentY !== y) {
      updateSkyline(skyline, x, y);
      currentY = y;
    }
    index++;
  }
}

Explanation >

The solution uses the divide-and-conquer approach to split the buildings into smaller groups recursively until we have individual buildings or no buildings left. 
Then, it merges the skylines of the left and right halves to obtain the final skyline.

The getSkyline function is the main entry point. It handles the base case when there are no buildings and the recursive case where the buildings are divided into two halves. 
It calls the mergeSkylines function to merge the left and right skylines.

The mergeSkylines function merges two skylines by iterating over their key points. 
It keeps track of the current maximum height and updates the merged skyline whenever there is a change in the height. 
The updateSkyline function is used to add or update the key points of the merged skyline.

The appendSkyline function is a helper function used to append any remaining key points from either the left or right skyline after the main merging loop.

Fastest solution >

  function divideAndConquer(left: number, right: number): number[][] {
    // console.log(`l:${left}, r:${right}`)
    if (left === right) {
      const theBuilding = buildings[left];
      const [start, end, height] = theBuilding;
      return [[start, height], [end, 0]];
    }

    const mid = Math.floor((left + right) / 2);
    const leftSkyline = divideAndConquer(left, mid);
    const rightSkyline = divideAndConquer(mid + 1, right);
    return mergeSkylines(leftSkyline, rightSkyline);
  }

  function mergeSkylines(leftSkyline: number[][], rightSkyline: number[][]): number[][] {
    const mergedSkyline: number[][] = [];
    let lPtr = 0;
    let rPtr = 0;
    let lPreviousHeight = 0;
    let rPreviousHeight = 0;

    while (lPtr < leftSkyline.length && rPtr < rightSkyline.length) {
      const leftBuilding = leftSkyline[lPtr];
      const rightBuilding = rightSkyline[rPtr];
      const [lStart, lHeight] = leftBuilding;
      const [rStart, rHeight] = rightBuilding;

      let pointOfInterest = [0,0];
      if (lStart < rStart) {
        pointOfInterest[0] = lStart;
        pointOfInterest[1] = Math.max(lHeight, rPreviousHeight);
        lPreviousHeight = lHeight;
        ++lPtr;
      } else if (lStart > rStart) {
        pointOfInterest[0] = rStart;
        pointOfInterest[1] = Math.max(rHeight, lPreviousHeight);
        rPreviousHeight = rHeight;
        ++rPtr;
      } else {
        pointOfInterest[0] = lStart;
        pointOfInterest[1] = Math.max(lHeight, rHeight);
        lPreviousHeight = lHeight;
        rPreviousHeight = rHeight;
        ++lPtr;
        ++rPtr;
      }

      if (mergedSkyline.length === 0 || pointOfInterest[1] !== mergedSkyline.at(-1)[1]) {
        mergedSkyline.push(pointOfInterest);
      }
    }

    while (lPtr < leftSkyline.length) {
      mergedSkyline.push(leftSkyline[lPtr]);
      ++lPtr;
    }

    while (rPtr < rightSkyline.length) {
      mergedSkyline.push(rightSkyline[rPtr]);
      ++rPtr;
    }

    return mergedSkyline;
  }

  return divideAndConquer(0, buildings.length - 1);
};
