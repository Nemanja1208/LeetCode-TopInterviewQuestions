Given an unsorted integer array nums, return the smallest missing positive integer.

You must implement an algorithm that runs in O(n) time and uses constant extra space.

Example 1:

Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.


Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.


Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.


Solution > 

function firstMissingPositive(nums: number[]): number {
    let len = nums.length;
    // step 1:
    let noOne = true;
    for(let i=0; i<len; i++){
        if(nums[i]===1) noOne = false;
        else if(nums[i]<=0 || nums[i] > len){
            nums[i] = 1;
        }
    }
    if(noOne) return 1;
    // step 2:
    for(let i=0; i<len; i++){
        let cur = Math.abs(nums[i]) - 1;
        if(nums[cur]>=1){
            nums[cur] *= -1;
        }
    }
    // step 3:
    for (let i = 0; i<len; i++) {
        if (nums[i]>0) return i + 1;
    }
    return len + 1;
};


Explanation > 

This is a TypeScript implementation of an algorithm to find the smallest missing positive integer in an unsorted integer array. 
Let's go through the code step by step to understand how it works:

The first step checks if the integer 1 is present in the array. If not, then 1 is the smallest missing positive integer and we can return it immediately. 
If 1 is present, we move on to the second step.

In the second step, we replace all non-positive integers and all integers greater than the length of the array with the value 1. 
This ensures that all the integers in the array are positive and within the range of 1 to n, where n is the length of the array.

In the third step, we iterate over the array again and mark the presence of each integer by negating the value at its corresponding index. 
For example, if the integer 3 is present in the array, we set the value at index 2 (i.e., 3-1) to be negative. This step allows us to check for the smallest missing positive integer in the next step.

In the final step, we iterate over the array one last time and find the smallest missing positive integer by returning the index of the first positive integer. 
For example, if the array is [1, 2, -3, 4, 5], the smallest missing positive integer is 3 because the values at indices 0, 1, 3, and 4 are all positive. 
If all the integers are present in the array, then the smallest missing positive integer is the length of the array plus 1.

The time complexity of this algorithm is O(n) because we iterate over the array three times, each time in a single loop. 
The space complexity is O(1) because we only use a constant amount of extra space, regardless of the size of the input array.


Fastest solution >

function firstMissingPositive(nums: number[]): number {
    let len = nums.length;
    // step 1:
    let noOne = true;
    for(let i=0; i<len; i++){
        if(nums[i]===1) noOne = false;
        else if(nums[i]<=0 || nums[i] > len){
            nums[i] = 1;
        }
    }
    if(noOne) return 1;
    // step 2:
    for(let i=0; i<len; i++){
        let cur = Math.abs(nums[i]) - 1;
        if(nums[cur]>=1){
            nums[cur] *= -1;
        }
    }
    // step 3:
    for (let i = 0; i<len; i++) {
        if (nums[i]>0) return i + 1;
    }
    return len + 1;
};