Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Solution >

function trap(height: number[]): number {
  let leftMax: number[] = [];
  let rightMax: number[] = [];
  let n: number = height.length;
  let water: number = 0;

  // calculate the maximum height from the left for each bar
  leftMax[0] = height[0];
  for (let i = 1; i < n; i++) {
    leftMax[i] = Math.max(leftMax[i-1], height[i]);
  }

  // calculate the maximum height from the right for each bar
  rightMax[n-1] = height[n-1];
  for (let i = n - 2; i >= 0; i--) {
    rightMax[i] = Math.max(rightMax[i+1], height[i]);
  }

  // calculate the amount of water that can be trapped for each bar
  for (let i = 0; i < n; i++) {
    water += Math.min(leftMax[i], rightMax[i]) - height[i];
  }

  return water;
}

Explanation >

The main idea of the algorithm is to compute the maximum height from the left and from the right for each bar, 
and then use those values to compute the amount of water that can be trapped for each bar. 

To do that, we traverse the height array twice, once from left to right and once from right to left, to compute the maximum heights. 
We store those values in two separate arrays, leftMax and rightMax.

Once we have the maximum heights, we can calculate the amount of water that can be trapped for each bar by subtracting the bar's height 
from the minimum of its left and right maximum heights. We add up all the trapped water values for each bar and return the total.

For example, given the input [0,1,0,2,1,0,1,3,2,1,2,1], the leftMax and rightMax arrays would be:

leftMax:  [0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3]
rightMax: [3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1]

Then we can compute the trapped water values for each bar:

water:    [0, 0, 1, 0, 1, 2, 1, 0, 0, 1, 0, 0]
And the total trapped water is 6.


Fastest solution >

function trap(height: number[]): number {
  let leftMax: number[] = [];
  let rightMax: number[] = [];
  let n: number = height.length;
  let water: number = 0;

  // calculate the maximum height from the left for each bar
  leftMax[0] = height[0];
  for (let i = 1; i < n; i++) {
    leftMax[i] = Math.max(leftMax[i-1], height[i]);
  }

  // calculate the maximum height from the right for each bar
  rightMax[n-1] = height[n-1];
  for (let i = n - 2; i >= 0; i--) {
    rightMax[i] = Math.max(rightMax[i+1], height[i]);
  }

  // calculate the amount of water that can be trapped for each bar
  for (let i = 0; i < n; i++) {
    water += Math.min(leftMax[i], rightMax[i]) - height[i];
  }

  return water;
}