A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, 
or 0 if no such sequence exists.

Example 1:
Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.

Example 2:
Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.

Solution >

function ladderLength(beginWord: string, endWord: string, wordList: string[]): number {
  const wordSet = new Set(wordList);
  if (!wordSet.has(endWord)) {
    return 0;
  }

  const queue: string[] = [beginWord];
  const visited = new Set(queue);
  let level = 1;

  while (queue.length > 0) {
    const levelSize = queue.length;
    for (let i = 0; i < levelSize; i++) {
      const currentWord = queue.shift()!;
      if (currentWord === endWord) {
        return level;
      }

      for (let j = 0; j < currentWord.length; j++) {
        const wordArr = currentWord.split('');
        for (let k = 0; k < 26; k++) {
          const char = String.fromCharCode(97 + k);
          if (char !== wordArr[j]) {
            wordArr[j] = char;
            const nextWord = wordArr.join('');
            if (wordSet.has(nextWord) && !visited.has(nextWord)) {
              queue.push(nextWord);
              visited.add(nextWord);
            }
          }
        }
      }
    }
    level++;
  }

  return 0;
}

Explanation >

Let's go through the solution step by step:

We start by creating a set from the wordList array to improve performance when checking if a word is in the list. We also check if the endWord is in the list. 
If it's not, we return 0 because we can't transform beginWord to endWord.

We create a queue to keep track of the words we need to process. We start by adding beginWord to the queue. We also create a set to keep track of the words we've visited.

We start a loop that will run until there are no more words in the queue. This loop represents the different levels of the word transformation ladder. 
We start with level 1, which includes only beginWord.

For each level, we process all the words in the queue at that level. We keep track of the size of the level using levelSize.

For each word in the queue, we check if it's equal to endWord. If it is, we return the current level because we've found the shortest transformation sequence.

If the word is not equal to endWord, we generate all the possible next words by changing one letter at a time. 
We do this by splitting the word into an array of characters, changing each character to every letter of the alphabet (excluding the current letter), 
and then joining the characters back together. If the next word is in the word set and we haven't visited it before, we add it to the queue and mark it as visited.

Once we've processed all the words at the current level, we increment level and move on to the next level.

If we've processed all the words in the queue and haven't found a transformation sequence, we return 0.

The time complexity of this solution is O(M^2 * N), where M is the length of each word and N is the total number of words in the word list. 
The space complexity is O(N), where N is the total number of words in the word list.

Fastest solution >

function ladderLength(beginWord: string, endWord: string, wordList: string[]): number {
    const wordSet = new Set(wordList);
    if (!wordSet.has(endWord)) {
        return 0;
    }
    const A_CHAR_CODE = 'a'.charCodeAt(0);

    let beginSet = new Set([beginWord]);
    let endSet = new Set([endWord]);
    let step = 1;
    while (beginSet.size > 0) {
        step++;
        const nextSet: Set<string> = new Set();
        for (const word of beginSet) {
            for (let i = 0; i < word.length; i++) {
                // 暴力尝试每一个可能得后续单词
                for (let j = 0; j < 26; j++) {
                    const nextWord = word.slice(0, i) + String.fromCharCode(A_CHAR_CODE + j) + word.slice(i + 1);
                    if (endSet.has(nextWord)) {
                        return step;
                    }
                    if (wordSet.has(nextWord)) {
                        nextSet.add(nextWord);
                        wordSet.delete(nextWord);
                    }
                }
            }
        }
        beginSet = nextSet;
        if (beginSet.size > endSet.size) {
            [beginSet, endSet] = [endSet, beginSet];
        }
    }
    return 0;
}