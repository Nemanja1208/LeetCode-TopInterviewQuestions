You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

Example 1:
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Example 2:
Input: nums = [1], k = 1
Output: [1]

Solution >

function maxSlidingWindow(nums: number[], k: number): number[] {
    const result: number[] = [];
    const deque: number[] = []; // Deque to store indices of elements in the current window
    
    for (let i = 0; i < nums.length; i++) {
        // Remove indices of elements that are out of the current window from the front of the deque
        if (deque.length > 0 && deque[0] === i - k) {
            deque.shift();
        }
        
        // Remove indices of elements smaller than the current element from the back of the deque
        while (deque.length > 0 && nums[deque[deque.length - 1]] < nums[i]) {
            deque.pop();
        }
        
        // Add the index of the current element to the back of the deque
        deque.push(i);
        
        // If the window has reached its minimum size, add the maximum element to the result array
        if (i >= k - 1) {
            result.push(nums[deque[0]]);
        }
    }
    
    return result;
}


Explanation >

We initialize an empty array result to store the maximum elements and a deque (double-ended queue) called deque to store the indices of elements in the current window.

We iterate over each element in the input nums array using the index i as the current element's position.

In each iteration, we check if there are any indices of elements that are out of the current window (i.e., indices that are k positions behind the current index i). 
If such indices exist, we remove them from the front of the deque using the shift() method.

Next, we remove the indices of elements from the back of the deque if they are smaller than the current element nums[i]. 
This ensures that the deque stores indices of elements in descending order of their values. The largest element will always be at the front of the deque.

After removing the irrelevant indices, we add the index i of the current element to the back of the deque.

If the window has reached its minimum size (i.e., i >= k - 1), we know that the maximum element of the current window is the element at the front of the deque. 
So we add nums[deque[0]] to the result array.

Finally, we return the result array, which contains the maximum sliding window elements.

Fastest solution >

function maxSlidingWindow(nums: number[], k: number): number[] {
    const q = [];  // stores indices in monotonically decreasing values
    const res = [];
    for (let i = 0; i < nums.length; i++) {
        while (q.length && nums[q[q.length - 1]] <= nums[i]) {
            q.pop();
        }
        q.push(i);
        // remove first element if it's outside the window
        if (q[0] === i - k) {
            q.shift();
        }
        // if window has k elements add to results (first k-1 windows have < k elements because we start from empty window and add 1 element each iteration)
        if (i >= k - 1) {
            res.push(nums[q[0]]);
        }
    }
    return res;    
};