A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. 
A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

Example 1:
Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

Example 2:
Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.


Solution >

function maxPathSum(root: TreeNode | null): number {
  let maxSum = -Infinity;

  function dfs(node: TreeNode | null): number {
    if (!node) return 0;

    const leftSum = Math.max(0, dfs(node.left));
    const rightSum = Math.max(0, dfs(node.right));

    maxSum = Math.max(maxSum, leftSum + rightSum + node.val);

    return Math.max(leftSum, rightSum) + node.val;
  }

  dfs(root);

  return maxSum;
}

Explanation >

The maxPathSum function takes in the root of a binary tree and returns the maximum path sum of any non-empty path in the tree.

The solution uses a depth-first search (DFS) approach to traverse the binary tree. At each node, we compute the maximum sum of the left and right subtrees, 
taking into account only positive sums. We then update the maxSum variable if the sum of the left subtree, right subtree, and the current node's value is greater 
than the current maxSum. Finally, we return the maximum sum of the left or right subtree plus the current node's value.

The time complexity of this solution is O(n), where n is the number of nodes in the binary tree, since we visit each node exactly once. 
The space complexity is O(h), where h is the height of the binary tree, since the maximum amount of space used by the call stack during the 
DFS traversal is proportional to the height of the tree.

Fastest solution >

function maxPathSum(root: TreeNode | null): number {
    if(!root) return 0
    let maxSum = -Infinity;
    function calculateMaxSum(node){
        if(!node) return 0
        let leftBranchSum = Math.max(0,calculateMaxSum(node.left));
        let rightBranchSum = Math.max(0,calculateMaxSum(node.right));
        
        maxSum = Math.max(maxSum,leftBranchSum+node.val+rightBranchSum);
        return Math.max(0,Math.max(leftBranchSum, rightBranchSum)) + node.val
    }
    calculateMaxSum(root);
    return maxSum;
};