The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.

For example, for arr = [2,3,4], the median is 3.
For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.
Implement the MedianFinder class:

MedianFinder() initializes the MedianFinder object.
void addNum(int num) adds the integer num from the data stream to the data structure.
double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.
 
Example 1:

Input
["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]
[[], [1], [2], [], [3], []]
Output
[null, null, null, 1.5, null, 2.0]

Explanation
MedianFinder medianFinder = new MedianFinder();
medianFinder.addNum(1);    // arr = [1]
medianFinder.addNum(2);    // arr = [1, 2]
medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)
medianFinder.addNum(3);    // arr[1, 2, 3]
medianFinder.findMedian(); // return 2.0
 

Constraints:

-105 <= num <= 105
There will be at least one element in the data structure before calling findMedian.
At most 5 * 104 calls will be made to addNum and findMedian.
 

Follow up:

If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?
If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?


Solution :

class MedianFinder {
  private arr: number[];

  constructor() {
    this.arr = [];
  }

  addNum(num: number): void {
    let left = 0;
    let right = this.arr.length - 1;

    while (left <= right) {
      const mid = Math.floor((left + right) / 2);
      if (this.arr[mid] === num) {
        this.arr.splice(mid, 0, num);
        return;
      } else if (this.arr[mid] < num) {
        left = mid + 1;
      } else {
        right = mid - 1;
      }
    }

    this.arr.splice(left, 0, num);
  }

  findMedian(): number {
    const length = this.arr.length;
    const mid = Math.floor(length / 2);

    if (length % 2 === 0) {
      return (this.arr[mid - 1] + this.arr[mid]) / 2;
    } else {
      return this.arr[mid];
    }
  }
}


Explanation :

The MedianFinder class maintains an ordered array to store the numbers added to it. The addNum function uses binary search to find 
the correct position to insert the new number in the array, ensuring that the array remains sorted.

The findMedian function calculates the median based on the length of the array. If the length is odd, it returns the middle element. 
If the length is even, it returns the average of the two middle elements.

Regarding the optimization for the given constraints:

If all integer numbers from the stream are in the range [0, 100], we can optimize the solution by using an array of size 101 to store the frequency of each number. 
This way, we don't need to maintain a sorted array of all the numbers. We can iterate over the frequency array to find the median when needed.
Here's the optimized solution for the range [0, 100]:

class MedianFinder {
  private frequency: number[];

  constructor() {
    this.frequency = Array(101).fill(0);
  }

  addNum(num: number): void {
    this.frequency[num]++;
  }

  findMedian(): number {
    let count = 0;
    let median1 = null;
    let median2 = null;

    for (let i = 0; i <= 100; i++) {
      count += this.frequency[i];

      if (median1 === null && count >= Math.floor((count + 1) / 2)) {
        median1 = i;
      }

      if (count >= Math.floor((count + 1) / 2) + 1) {
        median2 = i;
        break;
      }
    }

    if ((count % 2) === 0) {
      return (median1 + median2) / 2;
    } else {
      return median1;
    }
  }
}
If 99% of all integer numbers from the stream are in the range [0, 100], we can further optimize the solution by using a combination of the previous approaches. 
We can maintain a sorted array of numbers for the outliers (numbers outside the range [0, 100]), and use the frequency array for the numbers within the range. 
This way, most of the numbers will be handled efficiently by the frequency array, and we only need to consider the outliers occasionally.
The implementation for this optimized solution can be a combination of the previous two approaches, depending on the value of the number being added.


Fastest solution :

class MedianFinder {

    nums: number[] 
    constructor() {
        this.nums = []
    }

    addNum(num: number): void {

        let [leftPointer, rightPointer] = [0, this.nums.length]

        while (leftPointer < rightPointer) {
            const mid = Math.floor((leftPointer + rightPointer)/2)
            if (this.nums[mid] > num) {
                leftPointer = mid + 1
            } else {
                rightPointer = mid
            }
        }

        this.nums.splice(leftPointer, 0, num)
    }

    findMedian(): number {
        if (this.nums.length % 2 === 0 ) {
                        const rightMedian = this.nums[Math.floor((this.nums.length-1)/2)]
            const leftMedian = this.nums[Math.floor(this.nums.length/2)]
            return (leftMedian + rightMedian) / 2
        } else {
            return this.nums[Math.floor(this.nums.length/2)]
        }
    }
}