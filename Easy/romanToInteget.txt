Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.

 

Example 1:

Input: s = "III"
Output: 3
Explanation: III = 3.


Solution >

function romanToInt(s: string): number {
  const map = new Map<string, number>([
    ['I', 1],
    ['V', 5],
    ['X', 10],
    ['L', 50],
    ['C', 100],
    ['D', 500],
    ['M', 1000],
  ]);

  let result = 0;
  for (let i = 0; i < s.length; i++) {
    const current = map.get(s[i]);
    const next = map.get(s[i + 1]);
    if (next && current < next) {
      result -= current;
    } else {
      result += current;
    }
  }

  return result;
}


Explanation  >

The function starts by creating a Map object that maps each Roman numeral to its corresponding integer value.
It then initializes a result variable to 0, which will be used to store the final result.
The function then loops through each character in the input s string.
For each character, it retrieves its integer value from the map using map.get(s[i]).
It then retrieves the next character's integer value from the map using map.get(s[i + 1]).
If the next character's value is greater than the current character's value, it means that the current character is being used for subtraction (e.g. "IV" or "IX"), so it subtracts the current character's value from the result.
If the next character's value is not greater, it simply adds the current character's value to the result.
After the loop finishes, the final value of result is returned as the result.



Fastest solution >

const SYMBOLS = {
    I:1,
    V:5,
    X:10,
    L:50,
    C:100,
    D:500,
    M:1000
}

function romanToInt(s: string) {
    const arr = s.split('')
    let res = 0
    for(let i = 0; i< arr.length;i++){
        const currentValue = SYMBOLS[arr[i]]
        const nextValue = SYMBOLS[arr[i+1]]
        if(currentValue < nextValue){
            i+=1
            res += nextValue - currentValue
        }
        else {
            res += currentValue
        }
    }
    return res
}
