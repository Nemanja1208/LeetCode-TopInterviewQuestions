Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

Example 1:
Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:
Input: nums = [1,3]
Output: [3,1]
Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.


Solution >

function sortedArrayToBST(nums: number[]): TreeNode | null {
    if (nums.length === 0) return null

    const centerIndex = Math.floor(nums.length / 2)
    return new TreeNode(nums[centerIndex],
        sortedArrayToBST(nums.slice(0, centerIndex)),
        sortedArrayToBST(nums.slice(centerIndex + 1))
    )
};

Explanation >

Fastest solution >

function sortedArrayToBST(nums: number[]): TreeNode | null {
    if (nums.length === 0) return null;
    let midleidx = Math.floor(nums.length / 2);
    return new TreeNode(nums[midleidx],
                        sortedArrayToBST(nums.slice(0, midleidx)), 
                        sortedArrayToBST(nums.slice(midleidx + 1)));
};