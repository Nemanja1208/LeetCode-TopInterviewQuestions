Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), 
or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

Example 1:
Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

Example 2:
Input: n = 2
Output: false

Solution >

function isHappy(n: number): boolean {
  const visited: Set<number> = new Set(); // Set to track visited numbers

  while (n !== 1) {
    if (visited.has(n)) {
      // If we encounter a previously visited number, it's an endless cycle
      return false;
    }

    visited.add(n); // Add current number to the visited set

    let sum = 0;
    while (n > 0) {
      const digit = n % 10; // Extract the rightmost digit
      sum += digit * digit; // Add square of the digit to the sum
      n = Math.floor(n / 10); // Move to the next digit
    }

    n = sum; // Replace n with the sum of the squares of its digits
  }

  return true; // If n becomes 1, it's a happy number
}


Explanation >

The algorithm uses a visited set to keep track of the numbers encountered during the process. 
If we encounter a previously visited number, it means we have entered an endless cycle and 
should return false.

The algorithm enters a while loop that continues until n becomes 1 (a happy number) or 
until we encounter a cycle.

Inside the loop, we check if n is in the visited set. If it is, we return false.

If n is not in the visited set, we add it to the set.

We then calculate the sum of the squares of n's digits. 
This is done by repeatedly extracting the rightmost digit using the modulo operator %, squaring it, 
and adding it to the sum variable. We also update n by dividing it by 10 (integer division) 
to move to the next digit.

After calculating the sum of the squares of the digits, we update n with the new value.

The process continues until n becomes 1 (a happy number) or until we encounter a cycle.

Finally, if n becomes 1, we return true as it is a happy number.

The algorithm has a time complexity of O(log n) because in the worst case, 
it takes log n iterations for n to become 1.

Fastest solution >

function isHappy(n: number): boolean {
  if (n === 1) {
    return true;
  }
  const set = new Set();
  let sum = n;
  while (sum !== 1) {
    const newSum = getNewSum(sum);
    if (set.has(newSum)) {
      return false;
    }
    set.add(newSum);
    sum = newSum;
  }
  return true;
}

function getNewSum(number: number): number {
  const numbers: string[] = [...number.toString()];

  return numbers.reduce((acc, value) => {
    return acc + Math.pow(Number(value), 2);
  }, 0);
}