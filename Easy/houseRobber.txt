You are a professional robber planning to rob houses along a street. 
Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them 
is that adjacent houses have security systems connected and it will automatically contact the police 
if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, 
return the maximum amount of money you can rob tonight without alerting the police.

Example 1:
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

Example 2:
Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.

Solution >

function rob(nums: number[]): number {
    if (nums.length === 0) {
        return 0;
    }
    if (nums.length === 1) {
        return nums[0];
    }

    const dp: number[] = [];
    dp[0] = nums[0];
    dp[1] = Math.max(nums[0], nums[1]);

    for (let i = 2; i < nums.length; i++) {
        dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1]);
    }

    return dp[nums.length - 1];
}


Explanation >

The solution uses dynamic programming to find the maximum amount of money that can be robbed without alerting the police.
The base cases are handled first. If there are no houses (empty array), the maximum amount is 0. If there is only one house, 
the maximum amount is the money in that house.

An array dp is created to store the maximum amount of money that can be robbed up to the i-th house.
The maximum amount of money that can be robbed at the i-th house is either the sum of the money in the i-th house and 
the maximum amount that can be robbed up to the i-2 house, or the maximum amount that can be robbed up to the i-1 house. 
We take the maximum of these two values.

The dp array is filled iteratively from the second house onwards using the above logic.
The maximum amount of money that can be robbed without alerting the police is the last element of the dp array, 
which represents the maximum amount that can be robbed up to the last house.
Let's test the solution with the provided examples:

Example 1:

const nums1 = [1, 2, 3, 1];
console.log(rob(nums1)); // Output: 4

Example 2:

const nums2 = [2, 7, 9, 3, 1];
console.log(rob(nums2)); // Output: 12

The solution will correctly calculate and output the maximum amount of money that can be robbed without alerting the police.

Fastest solution >

function rob(nums: number[]): number {
  const memo = [];
  const rRob = (i: number) => {
    if (i < 0) return 0;

    if (memo[i] >= 0) return memo[i];
    const tmp = Math.max(rRob(i - 1), rRob(i - 2) + nums[i], rRob(i - 3) + nums[i]);

    memo[i] = tmp;

    return tmp;
  }

  return rRob(nums.length - 1);
};
