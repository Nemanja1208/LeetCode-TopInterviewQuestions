Reverse bits of a given 32 bits unsigned integer.

Note:

Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. 
They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. 
Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.

Example 1:
Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, 
so return 964176192 which its binary representation is 00111001011110000010100101000000.

Example 2:
Input: n = 11111111111111111111111111111101
Output:   3221225471 (10111111111111111111111111111111)
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, 
so return 3221225471 which its binary representation is 10111111111111111111111111111111.

Solution >

function reverseBits(n: number): number {
  let result = 0;
  for (let i = 0; i < 32; i++) {
    result = (result << 1) | (n & 1);
    n >>= 1;
  }
  return result >>> 0; // Convert to unsigned 32-bit integer
}


Explanation >

We initialize a variable result to store the reversed bits of the input number. Initially, it is set to 0.
We iterate i from 0 to 31 (since we're dealing with 32 bits).
In each iteration, we perform the following steps:
Left shift result by 1: This moves the existing bits in result to the left, creating space for the next bit.
Bitwise AND (n & 1): This extracts the least significant bit of n.
Bitwise OR (result | (n & 1)): This sets the least significant bit of result to the extracted bit from n.
Right shift n by 1: This discards the least significant bit of n, getting it ready for the next iteration.
After the loop, result will contain the reversed bits of the input number.
To ensure we get an unsigned 32-bit integer as the output, we use the unsigned right shift (>>> 0) to convert the signed result to an unsigned value.
We return the final value of result as an unsigned 32-bit integer.

Fastest solution >

function reverseBits(n: number): number {
    const mask = 1
    let reverN = 0
    let exp = 31
    while (n) { // put n value to the first 32
        let newN = mask & n
        if (newN === 1) {
            reverN += newN * Math.pow(2, exp)
        }
        n = n >>> 1
        exp--
    }
    
    return reverN
};