Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

You must not use any built-in exponent function or operator.

For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.

Example 1:

Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.

Example 2:

Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.

Solution >

function mySqrt(x: number): number {
  let low = 0;
  let high = x;

  while (low <= high) {
    const mid = Math.floor((low + high) / 2);
    const square = mid * mid;

    if (square === x) {
      return mid;
    } else if (square < x) {
      low = mid + 1;
    } else {
      high = mid - 1;
    }
  }

  // low is the largest integer whose square is less than or equal to x
  return low - 1;
}

Explanation >

To find the square root of a non-negative integer x, we can use a binary search algorithm. We know that the square root of x is between 0 and x. 
So, we can start our binary search with low=0 and high=x. At each iteration, we compute the middle value (mid) of the range and compare it with the square of mid. 
If the square of mid is greater than x, we update high to mid-1. Otherwise, we update low to mid+1. We keep repeating this process until low <= high.

Once the binary search ends, low will be the largest integer whose square is less than or equal to x. Therefore, we return low as the result.

Fastest solution >

function mySqrt(x: number): number {
    if (x < 2) {
        return x;
    }
    let s = 2;
    let e = Math.floor(x / 2);
    while (s <= e) {
        let mid = Math.floor(s + ((e - s) / 2));
        if ((mid * mid) < x) {
            s = mid + 1;
        } else if ((mid * mid) > x) {
            e = mid - 1;
        } else {
            return mid;
        }
    }
    return e;
};