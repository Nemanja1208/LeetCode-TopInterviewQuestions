Write a function that reverses a string. The input string is given as an array of characters s.

You must do this by modifying the input array in-place with O(1) extra memory.

Example 1:
Input: s = ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]

Example 2:
Input: s = ["H","a","n","n","a","h"]
Output: ["h","a","n","n","a","H"]

Constraints:

1 <= s.length <= 105
s[i] is a printable ascii character.


Solution >

function reverseString(s: string[]): void {
  let left = 0;
  let right = s.length - 1;

  while (left < right) {
    const temp = s[left];
    s[left] = s[right];
    s[right] = temp;

    left++;
    right--;
  }
}



Explanation >

The function reverseString takes an array of characters s as input and returns void since it modifies the input array in-place.
We initialize two pointers, left and right, pointing to the first and last elements of the array, respectively.
We start a loop that continues until left is less than right.
Inside the loop, we swap the characters at positions left and right by using a temporary variable temp.
After swapping, we increment left and decrement right to move closer towards the center of the string.
The loop continues until left becomes greater than or equal to right, indicating that we have reversed the entire string.
Finally, the reversed string is stored in the input array s.
This solution has a time complexity of O(n), where n is the length of the input string. 
It only requires O(1) extra memory, as the character swapping is done in-place without using any additional data structures.

Fastest solution > \

function reverseString(s: string[]): void {
    let left = 0
    let right = s.length - 1

    while(left < right) {
        let tmp = s[right]
        s[right] = s[left]
        s[left] = tmp
        left++
        right--
    }
};