Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits 
it has (also known as the Hamming weight).

Note:

Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. 
It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, 
in Example 3, the input represents the signed integer. -3.

Example 1:
Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.

Example 2:
Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.

Example 3:
Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.

Solution >

function hammingWeight(n: number): number {
  let count = 0;
  while (n !== 0) {
    count += n & 1; // Check the least significant bit
    n >>>= 1; // Right shift the number by 1 bit
  }
  return count;
}


Explanation >

The function hammingWeight takes an unsigned integer n as input and returns the number of '1' bits in its binary representation.

We initialize a variable count to keep track of the number of '1' bits. Initially, it is set to 0.

We use a while loop to iterate until the number becomes zero. In each iteration, we perform the following steps:

a. We use the bitwise AND operator (&) with n and 1 to check the least significant bit. If the bit is '1', we increment the count by 1.

b. We right shift n by 1 bit using the unsigned right shift operator (>>>). 
This discards the least significant bit and moves the other bits one position to the right.

After the loop finishes, we have counted all the '1' bits in the binary representation of the input number. We return the final value of count.

This approach works by iteratively checking the least significant bit of the number and then shifting the number to the right to examine the next bit. 
The process continues until the number becomes zero, ensuring that all bits are examined. The count is incremented whenever a '1' bit is encountered.

Fastest solution >

function hammingWeight(n: number, c = 0): number {
    while (n !== 0) {
        n = n & (n - 1);
        c++;
    }
    return c;
};