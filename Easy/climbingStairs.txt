You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps


Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Solution >

function climbStairs(n: number): number {
    if (n <= 2) {
        return n;
    }
    let first = 1;
    let second = 2;
    for (let i = 3; i <= n; i++) {
        let third = first + second;
        first = second;
        second = third;
    }
    return second;
}

Explanation >

The function climbStairs takes an integer n as input and returns the number of distinct ways to climb the staircase of n steps.

The solution uses a dynamic programming approach where we use two variables first and second to keep track of the number of distinct ways to climb the staircase for the previous two steps. 
We initialize first to 1 (as there's only one way to climb 1 step) and second to 2 (as there are two ways to climb 2 steps - either by taking two 1-step climbs or one 2-step climb).

Then we loop through the remaining steps, calculating the number of distinct ways to climb i steps by adding the number of ways to climb i-1 steps (using one 1-step climb) 
and the number of ways to climb i-2 steps (using one 2-step climb). We update first and second accordingly and continue with the loop until we reach n steps.

Finally, we return second which contains the number of distinct ways to climb the n steps.

For example, if we call climbStairs(3), it will return 3 because there are three distinct ways to climb the staircase of 3 steps (as shown in the example above).

Note: The time complexity of this solution is O(n) and the space complexity is O(1).

Fastest solution >

function climbStairs(n: number): number {
    const dp = [0, 1, 2];
    for (let i = 3; i < n + 1; i++) {
        dp.push(dp[i - 1] + dp[i - 2])
    }
    return dp[n];
};