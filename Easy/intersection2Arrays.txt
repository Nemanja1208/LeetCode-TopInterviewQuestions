Given two integer arrays nums1 and nums2, return an array of their intersection. 
Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

Example 1:
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]

Example 2:
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.
 
Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000
 
Follow up:

What if the given array is already sorted? How would you optimize your algorithm?
What if nums1's size is small compared to nums2's size? Which algorithm is better?
What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?


Solution >

function intersect(nums1: number[], nums2: number[]): number[] {
    const countMap: { [key: number]: number } = {};
    const result: number[] = [];

    // Count the occurrences of each number in nums1
    for (const num of nums1) {
        countMap[num] = (countMap[num] || 0) + 1;
    }

    // Iterate through nums2 and check for intersection
    for (const num of nums2) {
        if (countMap[num] && countMap[num] > 0) {
            result.push(num);
            countMap[num]--;
        }
    }

    return result;
}


Explanation >

We create a countMap object to store the count of each number in nums1.
We iterate through nums1 and increment the count of each number in the countMap.
Next, we iterate through nums2 and check if the number exists in countMap and has a count greater than 0. If so, we add it to the result array and decrement the count in the countMap.
Finally, we return the result array, which contains the intersection of the two arrays.
Now, let's address the follow-up questions:

What if the given array is already sorted? How would you optimize your algorithm?

If the arrays are already sorted, we can optimize the algorithm using the two-pointer technique.
We can maintain two pointers, one for each array, and increment or decrement the pointers based on the comparison of the elements.
This way, we can avoid using the countMap and directly find the intersection in a single pass.
The time complexity of this optimized approach would be O(n), where n is the size of the larger array.
What if nums1's size is small compared to nums2's size? Which algorithm is better?

If nums1 is much smaller than nums2, and both arrays are unsorted, it would be more efficient to use the original algorithm that utilizes a countMap.
The original algorithm has a time complexity of O(m + n), where m and n are the sizes of nums1 and nums2, respectively.
Using the two-pointer technique on the larger array would result in a time complexity of O(n * log m), which is less efficient.
What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?

In this case, we need to find a memory-efficient solution that doesn't load all elements into memory at once.
One possible approach is to sort both arrays, read a small chunk of elements from nums1, and stream nums2 from the disk one element at a time.
We can then find the intersection by comparing the elements in a streaming fashion and outputting the common elements.
This approach minimizes memory usage but may result in slower performance due to disk I/O operations.

Fastest solution >

function intersect(nums1: number[], nums2: number[]): number[] {
   const map = {}
   const res = []
   for (const num of nums1) {
       map[num] = (map[num] || 0) + 1;
   }
   for (const num of nums2) {
       if (map[num] && map) {
           res.push(num)
           map[num] -= 1
       }
   }
   return res
};